
WS2812B_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08006c78  08006c78  00016c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00016ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00016ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001358  2000000c  08006eb4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001364  08006eb4  00021364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010300  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c9  00000000  00000000  0003037f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bed  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002637d  00000000  00000000  0003448d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f30  00000000  00000000  0005a80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4748  00000000  00000000  0006e73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004320  00000000  00000000  00162e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001671a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006c60 	.word	0x08006c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006c60 	.word	0x08006c60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Set_LED>:
 * @brief Ciblage série d'une LED.
 * @param[in] LEDnum : identifiant de la led (rang sur la ligne)
 * @param[in] Red, Green, Blue : Couleurs RGB
 */
void Set_LED (int LED_id, int R, int G, int B)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
	LED_Data[LED_id][0] = LED_id;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	b2d9      	uxtb	r1, r3
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <Set_LED+0x58>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LED_id][1] = G;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	b2d9      	uxtb	r1, r3
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <Set_LED+0x58>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	460a      	mov	r2, r1
 8000ec8:	705a      	strb	r2, [r3, #1]
	LED_Data[LED_id][2] = R;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	b2d9      	uxtb	r1, r3
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <Set_LED+0x58>)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	460a      	mov	r2, r1
 8000ed8:	709a      	strb	r2, [r3, #2]
	LED_Data[LED_id][3] = B;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2d9      	uxtb	r1, r3
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <Set_LED+0x58>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	460a      	mov	r2, r1
 8000ee8:	70da      	strb	r2, [r3, #3]
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	00000000 	.word	0x00000000

08000f00 <Set_Brightness>:
/**
 * @brief Fonction pour configurer  la luminosité. Utilise une fonction pseudo-linéaire pour ajuster la luminosité.
 * @param[in] brightness : luminosité souhaitée entre [0-45]
 */
void Set_Brightness (int brightness)  // 0-45
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f0c:	dd01      	ble.n	8000f12 <Set_Brightness+0x12>
 8000f0e:	232d      	movs	r3, #45	; 0x2d
 8000f10:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e060      	b.n	8000fda <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000f18:	4a37      	ldr	r2, [pc, #220]	; (8000ff8 <Set_Brightness+0xf8>)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f20:	4a36      	ldr	r2, [pc, #216]	; (8000ffc <Set_Brightness+0xfc>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000f28:	2301      	movs	r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e04f      	b.n	8000fce <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // en degrés
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // en rad
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff faa5 	bl	8000490 <__aeabi_f2d>
 8000f46:	a32a      	add	r3, pc, #168	; (adr r3, 8000ff0 <Set_Brightness+0xf0>)
 8000f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4c:	f7ff faf8 	bl	8000540 <__aeabi_dmul>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <Set_Brightness+0x100>)
 8000f5e:	f7ff fc19 	bl	8000794 <__aeabi_ddiv>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fdcb 	bl	8000b04 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <Set_Brightness+0xf8>)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	441a      	add	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa73 	bl	800046c <__aeabi_i2d>
 8000f86:	4604      	mov	r4, r0
 8000f88:	460d      	mov	r5, r1
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fa80 	bl	8000490 <__aeabi_f2d>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	ec43 2b10 	vmov	d0, r2, r3
 8000f98:	f004 fdc2 	bl	8005b20 <tan>
 8000f9c:	ec53 2b10 	vmov	r2, r3, d0
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff fbf6 	bl	8000794 <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd88 	bl	8000ac4 <__aeabi_d2uiz>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b2d9      	uxtb	r1, r3
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <Set_Brightness+0xfc>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	441a      	add	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	ddac      	ble.n	8000f2e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	2b50      	cmp	r3, #80	; 0x50
 8000fde:	dd9b      	ble.n	8000f18 <Set_Brightness+0x18>
		}
	}

#endif

}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	53c8d4f1 	.word	0x53c8d4f1
 8000ff4:	400921fb 	.word	0x400921fb
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	2000016c 	.word	0x2000016c
 8001000:	40668000 	.word	0x40668000

08001004 <WS2812_Send>:

/**
 * @brief Fonction d'envoi de la commande. Convertit les commandes en signaux PWM
 */
void WS2812_Send (void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
	uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	e036      	b.n	8001082 <WS2812_Send+0x7e>
	{
		#if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001014:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <WS2812_Send+0xcc>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	785b      	ldrb	r3, [r3, #1]
 800101e:	041a      	lsls	r2, r3, #16
 8001020:	492b      	ldr	r1, [pc, #172]	; (80010d0 <WS2812_Send+0xcc>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	431a      	orrs	r2, r3
 800102e:	4928      	ldr	r1, [pc, #160]	; (80010d0 <WS2812_Send+0xcc>)
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	78db      	ldrb	r3, [r3, #3]
 8001038:	4313      	orrs	r3, r2
 800103a:	607b      	str	r3, [r7, #4]
		#else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
		#endif

		for (int i=23; i>=0; i--)
 800103c:	2317      	movs	r3, #23
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e019      	b.n	8001076 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001042:	2201      	movs	r2, #1
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 de 90 (2/3 du rapport cyclique) => envoi d'un 1 logique (cf.datasheet)
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <WS2812_Send+0xd0>)
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	213c      	movs	r1, #60	; 0x3c
 800105a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800105e:	e004      	b.n	800106a <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 de 90 (1/3 du rapport cyclique) => envoi d'un 0 logique (cf.datasheet)
 8001060:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <WS2812_Send+0xd0>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	211e      	movs	r1, #30
 8001066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3b01      	subs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	dae2      	bge.n	8001042 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	3301      	adds	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b50      	cmp	r3, #80	; 0x50
 8001086:	ddc5      	ble.n	8001014 <WS2812_Send+0x10>
		}

	}


	for (int i=0; i<50; i++) // 50 zéros pour les 50 us de reset (cf.datasheet)
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	e00a      	b.n	80010a4 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800108e:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <WS2812_Send+0xd0>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2100      	movs	r1, #0
 8001094:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++) // 50 zéros pour les 50 us de reset (cf.datasheet)
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	2b31      	cmp	r3, #49	; 0x31
 80010a8:	ddf1      	ble.n	800108e <WS2812_Send+0x8a>
	}

	//HAL_Delay(100); // délai de reset, échec : débordement de la trame de commande sur LED suivante
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <WS2812_Send+0xd0>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <WS2812_Send+0xd4>)
 80010b4:	f002 fd40 	bl	8003b38 <HAL_TIM_PWM_Start_DMA>
	while (!FLAG_DataSent){};
 80010b8:	bf00      	nop
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <WS2812_Send+0xd8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0fb      	beq.n	80010ba <WS2812_Send+0xb6>
	FLAG_DataSent = 0;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <WS2812_Send+0xd8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000016c 	.word	0x2000016c
 80010d4:	200002b4 	.word	0x200002b4
 80010d8:	20001248 	.word	0x20001248
 80010dc:	200002b0 	.word	0x200002b0

080010e0 <HAL_TIM_PWM_PulseFinishedCallback>:

/**
 * @brief Fonction de routine, pour arrêter la DMA et la génération PWM en fin de transmission
 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80010ec:	f002 ff44 	bl	8003f78 <HAL_TIM_PWM_Stop_DMA>
	FLAG_DataSent=1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20001248 	.word	0x20001248
 8001104:	200002b0 	.word	0x200002b0

08001108 <LED_test_1>:

	//HAL_Delay(500);
}

void LED_test_1()
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
	  for(int i = 0 ; i<=MAX_LED ; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	e02a      	b.n	800116a <LED_test_1+0x62>
	  {
		  Set_LED(i, 225-2*i, 100+1.5*i, 100-5*i);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	f1c3 04e1 	rsb	r4, r3, #225	; 0xe1
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff f9a5 	bl	800046c <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <LED_test_1+0xb8>)
 8001128:	f7ff fa0a 	bl	8000540 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <LED_test_1+0xbc>)
 800113a:	f7ff f84b 	bl	80001d4 <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fc95 	bl	8000a74 <__aeabi_d2iz>
 800114a:	4601      	mov	r1, r0
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4613      	mov	r3, r2
 8001150:	079b      	lsls	r3, r3, #30
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	1a9b      	subs	r3, r3, r2
 8001158:	3364      	adds	r3, #100	; 0x64
 800115a:	460a      	mov	r2, r1
 800115c:	4621      	mov	r1, r4
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f7ff fe9e 	bl	8000ea0 <Set_LED>
	  for(int i = 0 ; i<=MAX_LED ; i++)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3301      	adds	r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b51      	cmp	r3, #81	; 0x51
 800116e:	ddd1      	ble.n	8001114 <LED_test_1+0xc>
	  }

	  for (int i=0; i<10; i++)
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	e00a      	b.n	800118c <LED_test_1+0x84>
	  {
		  Set_Brightness(i);
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	f7ff fec2 	bl	8000f00 <Set_Brightness>
		  WS2812_Send();
 800117c:	f7ff ff42 	bl	8001004 <WS2812_Send>
		  HAL_Delay(100);
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f000 fbd1 	bl	8001928 <HAL_Delay>
	  for (int i=0; i<10; i++)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	3301      	adds	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b09      	cmp	r3, #9
 8001190:	ddf1      	ble.n	8001176 <LED_test_1+0x6e>
	  }

	  for (int i=10; i>=0; i--)
 8001192:	230a      	movs	r3, #10
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	e00a      	b.n	80011ae <LED_test_1+0xa6>
	  {
		  Set_Brightness(i);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff feb1 	bl	8000f00 <Set_Brightness>
		  WS2812_Send();
 800119e:	f7ff ff31 	bl	8001004 <WS2812_Send>
		  HAL_Delay(50);
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f000 fbc0 	bl	8001928 <HAL_Delay>
	  for (int i=10; i>=0; i--)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	daf1      	bge.n	8001198 <LED_test_1+0x90>
	  }

}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	3ff80000 	.word	0x3ff80000
 80011c4:	40590000 	.word	0x40590000

080011c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_DMA_Init+0x38>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <MX_DMA_Init+0x38>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6493      	str	r3, [r2, #72]	; 0x48
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_DMA_Init+0x38>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	200c      	movs	r0, #12
 80011ec:	f000 fc9b 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011f0:	200c      	movs	r0, #12
 80011f2:	f000 fcb4 	bl	8001b5e <HAL_NVIC_EnableIRQ>

}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000

08001204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <MX_GPIO_Init+0xc4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a2a      	ldr	r2, [pc, #168]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_GPIO_Init+0xc4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a18      	ldr	r2, [pc, #96]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_GPIO_Init+0xc4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2120      	movs	r1, #32
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 f869 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800128c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <MX_GPIO_Init+0xc8>)
 800129e:	f000 feb1 	bl	8002004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a2:	2320      	movs	r3, #32
 80012a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012bc:	f000 fea2 	bl	8002004 <HAL_GPIO_Init>

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40021000 	.word	0x40021000
 80012cc:	48000800 	.word	0x48000800

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d4:	f000 fab3 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d8:	f000 f80b 	bl	80012f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012dc:	f7ff ff92 	bl	8001204 <MX_GPIO_Init>
  MX_DMA_Init();
 80012e0:	f7ff ff72 	bl	80011c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012e4:	f000 f9f6 	bl	80016d4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012e8:	f000 f8c4 	bl	8001474 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  LED_test_1();
 80012ec:	f7ff ff0c 	bl	8001108 <LED_test_1>
 80012f0:	e7fc      	b.n	80012ec <main+0x1c>

080012f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b096      	sub	sp, #88	; 0x58
 80012f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2244      	movs	r2, #68	; 0x44
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fbde 	bl	8005ac2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001306:	463b      	mov	r3, r7
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001314:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001318:	f001 f844 	bl	80023a4 <HAL_PWREx_ControlVoltageScaling>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001322:	f000 f837 	bl	8001394 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001326:	2302      	movs	r3, #2
 8001328:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001338:	2302      	movs	r3, #2
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 9;
 8001340:	2309      	movs	r3, #9
 8001342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001344:	2307      	movs	r3, #7
 8001346:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f87b 	bl	8002450 <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001360:	f000 f818 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2303      	movs	r3, #3
 800136a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	2104      	movs	r1, #4
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fc43 	bl	8002c08 <HAL_RCC_ClockConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001388:	f000 f804 	bl	8001394 <Error_Handler>
  }
}
 800138c:	bf00      	nop
 800138e:	3758      	adds	r7, #88	; 0x58
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x44>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_MspInit+0x44>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6613      	str	r3, [r2, #96]	; 0x60
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x44>)
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_MspInit+0x44>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x44>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x44>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 fa58 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <DMA1_Channel2_IRQHandler+0x10>)
 8001442:	f000 fd00 	bl	8001e46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20001294 	.word	0x20001294

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	; 0x68
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
 80014a4:	615a      	str	r2, [r3, #20]
 80014a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	222c      	movs	r2, #44	; 0x2c
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fb07 	bl	8005ac2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014b6:	4a44      	ldr	r2, [pc, #272]	; (80015c8 <MX_TIM1_Init+0x154>)
 80014b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014c8:	2259      	movs	r2, #89	; 0x59
 80014ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014de:	4839      	ldr	r0, [pc, #228]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014e0:	f002 fa72 	bl	80039c8 <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014ea:	f7ff ff53 	bl	8001394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014f8:	4619      	mov	r1, r3
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <MX_TIM1_Init+0x150>)
 80014fc:	f002 ff48 	bl	8004390 <HAL_TIM_ConfigClockSource>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001506:	f7ff ff45 	bl	8001394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800150a:	482e      	ldr	r0, [pc, #184]	; (80015c4 <MX_TIM1_Init+0x150>)
 800150c:	f002 fab3 	bl	8003a76 <HAL_TIM_PWM_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001516:	f7ff ff3d 	bl	8001394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001526:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800152a:	4619      	mov	r1, r3
 800152c:	4825      	ldr	r0, [pc, #148]	; (80015c4 <MX_TIM1_Init+0x150>)
 800152e:	f003 fd0d 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001538:	f7ff ff2c 	bl	8001394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	; 0x60
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155c:	2200      	movs	r2, #0
 800155e:	4619      	mov	r1, r3
 8001560:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_TIM1_Init+0x150>)
 8001562:	f002 fe01 	bl	8004168 <HAL_TIM_PWM_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800156c:	f7ff ff12 	bl	8001394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM1_Init+0x150>)
 80015a6:	f003 fd59 	bl	800505c <HAL_TIMEx_ConfigBreakDeadTime>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80015b0:	f7ff fef0 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x150>)
 80015b6:	f000 f855 	bl	8001664 <HAL_TIM_MspPostInit>

}
 80015ba:	bf00      	nop
 80015bc:	3768      	adds	r7, #104	; 0x68
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20001248 	.word	0x20001248
 80015c8:	40012c00 	.word	0x40012c00

080015cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_TIM_Base_MspInit+0x88>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d136      	bne.n	800164c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <HAL_TIM_Base_MspInit+0x8c>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_TIM_Base_MspInit+0x8c>)
 80015e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <HAL_TIM_Base_MspInit+0x8c>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_TIM_Base_MspInit+0x94>)
 80015fa:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 80015fe:	2207      	movs	r2, #7
 8001600:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001604:	2210      	movs	r2, #16
 8001606:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001610:	2280      	movs	r2, #128	; 0x80
 8001612:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001632:	f000 faaf 	bl	8001b94 <HAL_DMA_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 800163c:	f7ff feaa 	bl	8001394 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <HAL_TIM_Base_MspInit+0x90>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40012c00 	.word	0x40012c00
 8001658:	40021000 	.word	0x40021000
 800165c:	20001294 	.word	0x20001294
 8001660:	4002001c 	.word	0x4002001c

08001664 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d11d      	bne.n	80016c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800169e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4619      	mov	r1, r3
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f000 fca1 	bl	8002004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40012c00 	.word	0x40012c00
 80016d0:	40021000 	.word	0x40021000

080016d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_USART2_UART_Init+0x5c>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART2_UART_Init+0x58>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART2_UART_Init+0x58>)
 8001718:	f003 fd1e 	bl	8005158 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001722:	f7ff fe37 	bl	8001394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200012dc 	.word	0x200012dc
 8001730:	40004400 	.word	0x40004400

08001734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b0ac      	sub	sp, #176	; 0xb0
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2288      	movs	r2, #136	; 0x88
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f004 f9b4 	bl	8005ac2 <memset>
  if(uartHandle->Instance==USART2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_UART_MspInit+0xb0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d13b      	bne.n	80017dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001764:	2302      	movs	r3, #2
 8001766:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001768:	2300      	movs	r3, #0
 800176a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fc6d 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800177c:	f7ff fe0a 	bl	8001394 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001780:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 8001786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178a:	6593      	str	r3, [r2, #88]	; 0x58
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_UART_MspInit+0xb4>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017b0:	230c      	movs	r3, #12
 80017b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c8:	2307      	movs	r3, #7
 80017ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f000 fc14 	bl	8002004 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017dc:	bf00      	nop
 80017de:	37b0      	adds	r7, #176	; 0xb0
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40004400 	.word	0x40004400
 80017e8:	40021000 	.word	0x40021000

080017ec <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff fe2e 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f004 f95b 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff fd57 	bl	80012d0 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001830:	08006ea8 	.word	0x08006ea8
  ldr r2, =_sbss
 8001834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001838:	20001364 	.word	0x20001364

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f961 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fd9e 	bl	80013a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_InitTick+0x70>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f96d 	bl	8001b7a <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d809      	bhi.n	80018c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f937 	bl	8001b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_InitTick+0x74>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e007      	b.n	80018d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e004      	b.n	80018d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e001      	b.n	80018d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	20001360 	.word	0x20001360

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20001360 	.word	0x20001360

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e098      	b.n	8001cd8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <HAL_DMA_Init+0x150>)
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d80f      	bhi.n	8001bd2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b4b      	ldr	r3, [pc, #300]	; (8001ce8 <HAL_DMA_Init+0x154>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	; (8001cec <HAL_DMA_Init+0x158>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_DMA_Init+0x15c>)
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd0:	e00e      	b.n	8001bf0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_DMA_Init+0x160>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a43      	ldr	r2, [pc, #268]	; (8001cec <HAL_DMA_Init+0x158>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	009a      	lsls	r2, r3, #2
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_DMA_Init+0x164>)
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c4a:	d039      	beq.n	8001cc0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_DMA_Init+0x15c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11a      	bne.n	8001c8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_DMA_Init+0x168>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f003 031c 	and.w	r3, r3, #28
 8001c62:	210f      	movs	r1, #15
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4924      	ldr	r1, [pc, #144]	; (8001cfc <HAL_DMA_Init+0x168>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_DMA_Init+0x168>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	491d      	ldr	r1, [pc, #116]	; (8001cfc <HAL_DMA_Init+0x168>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
 8001c8a:	e019      	b.n	8001cc0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_DMA_Init+0x16c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	f003 031c 	and.w	r3, r3, #28
 8001c98:	210f      	movs	r1, #15
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4917      	ldr	r1, [pc, #92]	; (8001d00 <HAL_DMA_Init+0x16c>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_DMA_Init+0x16c>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 031c 	and.w	r3, r3, #28
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	4911      	ldr	r1, [pc, #68]	; (8001d00 <HAL_DMA_Init+0x16c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40020407 	.word	0x40020407
 8001ce8:	bffdfff8 	.word	0xbffdfff8
 8001cec:	cccccccd 	.word	0xcccccccd
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	bffdfbf8 	.word	0xbffdfbf8
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	400200a8 	.word	0x400200a8
 8001d00:	400204a8 	.word	0x400204a8

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Start_IT+0x20>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e04b      	b.n	8001dbc <HAL_DMA_Start_IT+0xb8>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d13a      	bne.n	8001dae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f921 	bl	8001fa4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d008      	beq.n	8001d7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 020e 	orr.w	r2, r2, #14
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e00f      	b.n	8001d9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0204 	bic.w	r2, r2, #4
 8001d8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 020a 	orr.w	r2, r2, #10
 8001d9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	e005      	b.n	8001dba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
 8001db8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d005      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2204      	movs	r2, #4
 8001de0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e029      	b.n	8001e3c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 020e 	bic.w	r2, r2, #14
 8001df6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0201 	bic.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	f003 021c 	and.w	r2, r3, #28
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
    }
  }
  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 031c 	and.w	r3, r3, #28
 8001e66:	2204      	movs	r2, #4
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d026      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x7a>
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d107      	bne.n	8001e9a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0204 	bic.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f003 021c 	and.w	r2, r3, #28
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eac:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d071      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ebe:	e06c      	b.n	8001f9a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	f003 031c 	and.w	r3, r3, #28
 8001ec8:	2202      	movs	r2, #2
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02e      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xec>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d029      	beq.n	8001f32 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 020a 	bic.w	r2, r2, #10
 8001efa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f003 021c 	and.w	r2, r3, #28
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2102      	movs	r1, #2
 8001f12:	fa01 f202 	lsl.w	r2, r1, r2
 8001f16:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d038      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f30:	e033      	b.n	8001f9a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f003 031c 	and.w	r3, r3, #28
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d02a      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x156>
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d025      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 020e 	bic.w	r2, r2, #14
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f003 021c 	and.w	r2, r3, #28
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
}
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f003 021c 	and.w	r2, r3, #28
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d108      	bne.n	8001fe8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fe6:	e007      	b.n	8001ff8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	e17f      	b.n	8002314 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	4013      	ands	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8171 	beq.w	800230e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d005      	beq.n	8002044 <HAL_GPIO_Init+0x40>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d130      	bne.n	80020a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800207a:	2201      	movs	r2, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	f003 0201 	and.w	r2, r3, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d118      	bne.n	80020e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80ac 	beq.w	800230e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_GPIO_Init+0x330>)
 80021b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ba:	4a5e      	ldr	r2, [pc, #376]	; (8002334 <HAL_GPIO_Init+0x330>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6613      	str	r3, [r2, #96]	; 0x60
 80021c2:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <HAL_GPIO_Init+0x330>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021ce:	4a5a      	ldr	r2, [pc, #360]	; (8002338 <HAL_GPIO_Init+0x334>)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021f8:	d025      	beq.n	8002246 <HAL_GPIO_Init+0x242>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01f      	beq.n	8002242 <HAL_GPIO_Init+0x23e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_Init+0x23a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0x236>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_Init+0x232>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_Init+0x22e>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_Init+0x22a>
 800222a:	2306      	movs	r3, #6
 800222c:	e00c      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800222e:	2307      	movs	r3, #7
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002232:	2305      	movs	r3, #5
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x244>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x244>
 8002246:	2300      	movs	r3, #0
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002258:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x334>)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_GPIO_Init+0x350>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800228a:	4a32      	ldr	r2, [pc, #200]	; (8002354 <HAL_GPIO_Init+0x350>)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002290:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_GPIO_Init+0x350>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	43db      	mvns	r3, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_GPIO_Init+0x350>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_GPIO_Init+0x350>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022de:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_GPIO_Init+0x350>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_GPIO_Init+0x350>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_GPIO_Init+0x350>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	f47f ae78 	bne.w	8002014 <HAL_GPIO_Init+0x10>
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	48001400 	.word	0x48001400
 8002350:	48001800 	.word	0x48001800
 8002354:	40010400 	.word	0x40010400

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002374:	e002      	b.n	800237c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40007000 	.word	0x40007000

080023a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b2:	d130      	bne.n	8002416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d038      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2232      	movs	r2, #50	; 0x32
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	4a1b      	ldr	r2, [pc, #108]	; (800244c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0c9b      	lsrs	r3, r3, #18
 80023e4:	3301      	adds	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e8:	e002      	b.n	80023f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fc:	d102      	bne.n	8002404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f2      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d110      	bne.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e00f      	b.n	8002436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800241e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002422:	d007      	beq.n	8002434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40007000 	.word	0x40007000
 8002448:	20000000 	.word	0x20000000
 800244c:	431bde83 	.word	0x431bde83

08002450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3ca      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b97      	ldr	r3, [pc, #604]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b94      	ldr	r3, [pc, #592]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80e4 	beq.w	800264c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_RCC_OscConfig+0x4a>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	2b0c      	cmp	r3, #12
 800248e:	f040 808b 	bne.w	80025a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 8087 	bne.w	80025a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800249a:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d005      	beq.n	80024b2 <HAL_RCC_OscConfig+0x62>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e3a2      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1a      	ldr	r2, [r3, #32]
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <HAL_RCC_OscConfig+0x7c>
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ca:	e005      	b.n	80024d8 <HAL_RCC_OscConfig+0x88>
 80024cc:	4b7c      	ldr	r3, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d8:	4293      	cmp	r3, r2
 80024da:	d223      	bcs.n	8002524 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fd55 	bl	8002f90 <RCC_SetFlashLatencyFromMSIRange>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e383      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f0:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a72      	ldr	r2, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	496d      	ldr	r1, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250e:	4b6c      	ldr	r3, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	4968      	ldr	r1, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e025      	b.n	8002570 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800252a:	f043 0308 	orr.w	r3, r3, #8
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4960      	ldr	r1, [pc, #384]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	495b      	ldr	r1, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fd15 	bl	8002f90 <RCC_SetFlashLatencyFromMSIRange>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e343      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002570:	f000 fc4a 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b52      	ldr	r3, [pc, #328]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	4950      	ldr	r1, [pc, #320]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	f003 031f 	and.w	r3, r3, #31
 8002588:	fa22 f303 	lsr.w	r3, r2, r3
 800258c:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <HAL_RCC_OscConfig+0x278>)
 800258e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002590:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCC_OscConfig+0x27c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff f96b 	bl	8001870 <HAL_InitTick>
 800259a:	4603      	mov	r3, r0
 800259c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d052      	beq.n	800264a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	e327      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d032      	beq.n	8002616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025b0:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a42      	ldr	r2, [pc, #264]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025bc:	f7ff f9a8 	bl	8001910 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c4:	f7ff f9a4 	bl	8001910 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e310      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d6:	4b3a      	ldr	r3, [pc, #232]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e2:	4b37      	ldr	r3, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4931      	ldr	r1, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002600:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	492c      	ldr	r1, [pc, #176]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
 8002614:	e01a      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002616:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002622:	f7ff f975 	bl	8001910 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800262a:	f7ff f971 	bl	8001910 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e2dd      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x1da>
 8002648:	e000      	b.n	800264c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800264a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d074      	beq.n	8002742 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d005      	beq.n	800266a <HAL_RCC_OscConfig+0x21a>
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b0c      	cmp	r3, #12
 8002662:	d10e      	bne.n	8002682 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d064      	beq.n	8002740 <HAL_RCC_OscConfig+0x2f0>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d160      	bne.n	8002740 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e2ba      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x24a>
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x298>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a2:	d115      	bne.n	80026d0 <HAL_RCC_OscConfig+0x280>
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a02      	ldr	r2, [pc, #8]	; (80026c0 <HAL_RCC_OscConfig+0x270>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e014      	b.n	80026e8 <HAL_RCC_OscConfig+0x298>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08006c78 	.word	0x08006c78
 80026c8:	20000000 	.word	0x20000000
 80026cc:	20000004 	.word	0x20000004
 80026d0:	4ba0      	ldr	r3, [pc, #640]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a9f      	ldr	r2, [pc, #636]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b9d      	ldr	r3, [pc, #628]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a9c      	ldr	r2, [pc, #624]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff f90e 	bl	8001910 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7ff f90a 	bl	8001910 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e276      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800270a:	4b92      	ldr	r3, [pc, #584]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x2a8>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7ff f8fa 	bl	8001910 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7ff f8f6 	bl	8001910 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	; 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e262      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x2d0>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d060      	beq.n	8002810 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x310>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d119      	bne.n	800278e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d116      	bne.n	800278e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	4b7c      	ldr	r3, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x328>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e23f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b76      	ldr	r3, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	4973      	ldr	r1, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800278c:	e040      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d023      	beq.n	80027de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002796:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7ff f8b5 	bl	8001910 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7ff f8b1 	bl	8001910 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e21d      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	4b65      	ldr	r3, [pc, #404]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b62      	ldr	r3, [pc, #392]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	495f      	ldr	r1, [pc, #380]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e018      	b.n	8002810 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a5c      	ldr	r2, [pc, #368]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80027e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff f891 	bl	8001910 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f2:	f7ff f88d 	bl	8001910 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1f9      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d03c      	beq.n	8002896 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01c      	beq.n	800285e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002824:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	4a4a      	ldr	r2, [pc, #296]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f86c 	bl	8001910 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff f868 	bl	8001910 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1d4      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCC_OscConfig+0x3ec>
 800285c:	e01b      	b.n	8002896 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002864:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f84f 	bl	8001910 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002876:	f7ff f84b 	bl	8001910 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1b7      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800288a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1ef      	bne.n	8002876 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80a6 	beq.w	80029f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028a8:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	4b27      	ldr	r3, [pc, #156]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	4a26      	ldr	r2, [pc, #152]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	; 0x58
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028cc:	2301      	movs	r3, #1
 80028ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_OscConfig+0x508>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d118      	bne.n	800290e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028dc:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <HAL_RCC_OscConfig+0x508>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	; (8002958 <HAL_RCC_OscConfig+0x508>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e8:	f7ff f812 	bl	8001910 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7ff f80e 	bl	8001910 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e17a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_RCC_OscConfig+0x508>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_RCC_OscConfig+0x4d8>
 8002916:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002926:	e029      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d115      	bne.n	800295c <HAL_RCC_OscConfig+0x50c>
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	4a07      	ldr	r2, [pc, #28]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	4a03      	ldr	r2, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x504>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002950:	e014      	b.n	800297c <HAL_RCC_OscConfig+0x52c>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
 800295c:	4b9c      	ldr	r3, [pc, #624]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	4a9b      	ldr	r2, [pc, #620]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800296c:	4b98      	ldr	r3, [pc, #608]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	4a97      	ldr	r2, [pc, #604]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d016      	beq.n	80029b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe ffc4 	bl	8001910 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe ffc0 	bl	8001910 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e12a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ed      	beq.n	800298c <HAL_RCC_OscConfig+0x53c>
 80029b0:	e015      	b.n	80029de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe ffad 	bl	8001910 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe ffa9 	bl	8001910 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e113      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029d0:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ed      	bne.n	80029ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7ffb      	ldrb	r3, [r7, #31]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e8:	4a79      	ldr	r2, [pc, #484]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80fe 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f040 80d0 	bne.w	8002ba4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a04:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d130      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	3b01      	subs	r3, #1
 8002a24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d127      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d11f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a44:	2a07      	cmp	r2, #7
 8002a46:	bf14      	ite	ne
 8002a48:	2201      	movne	r2, #1
 8002a4a:	2200      	moveq	r2, #0
 8002a4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d113      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d06e      	beq.n	8002b58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	2b0c      	cmp	r3, #12
 8002a7e:	d069      	beq.n	8002b54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a80:	4b53      	ldr	r3, [pc, #332]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0ad      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a4b      	ldr	r2, [pc, #300]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa8:	f7fe ff32 	bl	8001910 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe ff2e 	bl	8001910 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e09a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ac2:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ace:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	4b40      	ldr	r3, [pc, #256]	; (8002bd4 <HAL_RCC_OscConfig+0x784>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ade:	3a01      	subs	r2, #1
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ae8:	0212      	lsls	r2, r2, #8
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af0:	0852      	lsrs	r2, r2, #1
 8002af2:	3a01      	subs	r2, #1
 8002af4:	0552      	lsls	r2, r2, #21
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002afc:	0852      	lsrs	r2, r2, #1
 8002afe:	3a01      	subs	r2, #1
 8002b00:	0652      	lsls	r2, r2, #25
 8002b02:	4311      	orrs	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b08:	0912      	lsrs	r2, r2, #4
 8002b0a:	0452      	lsls	r2, r2, #17
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4930      	ldr	r1, [pc, #192]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b14:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2d      	ldr	r2, [pc, #180]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a2a      	ldr	r2, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b2c:	f7fe fef0 	bl	8001910 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe feec 	bl	8001910 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e058      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b52:	e050      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e04f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d148      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b70:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b7c:	f7fe fec8 	bl	8001910 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe fec4 	bl	8001910 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e030      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x734>
 8002ba2:	e028      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b0c      	cmp	r3, #12
 8002ba8:	d023      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_RCC_OscConfig+0x780>)
 8002bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe feab 	bl	8001910 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bbc:	e00c      	b.n	8002bd8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fea7 	bl	8001910 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d905      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e013      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ec      	bne.n	8002bbe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	4905      	ldr	r1, [pc, #20]	; (8002c00 <HAL_RCC_OscConfig+0x7b0>)
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_RCC_OscConfig+0x7b4>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	60cb      	str	r3, [r1, #12]
 8002bf0:	e001      	b.n	8002bf6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3720      	adds	r7, #32
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	feeefffc 	.word	0xfeeefffc

08002c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0e7      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c1c:	4b75      	ldr	r3, [pc, #468]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d910      	bls.n	8002c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2a:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0207 	bic.w	r2, r3, #7
 8002c32:	4970      	ldr	r1, [pc, #448]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0cf      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d908      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4960      	ldr	r1, [pc, #384]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04c      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d121      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0a6      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca6:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e09a      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cbe:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e08e      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e086      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4943      	ldr	r1, [pc, #268]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fe0e 	bl	8001910 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7fe fe0a 	bl	8001910 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e06e      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d208      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	492b      	ldr	r1, [pc, #172]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d210      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5c:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 0207 	bic.w	r2, r3, #7
 8002d64:	4923      	ldr	r1, [pc, #140]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e036      	b.n	8002dec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4918      	ldr	r1, [pc, #96]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4910      	ldr	r1, [pc, #64]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dbc:	f000 f824 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	091b      	lsrs	r3, r3, #4
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	490b      	ldr	r1, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1f4>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1f8>)
 8002dda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1fc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fd45 	bl	8001870 <HAL_InitTick>
 8002de6:	4603      	mov	r3, r0
 8002de8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dea:	7afb      	ldrb	r3, [r7, #11]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	08006c78 	.word	0x08006c78
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x34>
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d121      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d11e      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e005      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 030f 	and.w	r3, r3, #15
 8002e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e64:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d102      	bne.n	8002e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e80:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e82:	61bb      	str	r3, [r7, #24]
 8002e84:	e004      	b.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e8c:	4b23      	ldr	r3, [pc, #140]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d134      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e96:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0xa6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8002eac:	e005      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002eb4:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002eb6:	617b      	str	r3, [r7, #20]
      break;
 8002eb8:	e002      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	617b      	str	r3, [r7, #20]
      break;
 8002ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	3301      	adds	r3, #1
 8002ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	fb03 f202 	mul.w	r2, r3, r2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	0e5b      	lsrs	r3, r3, #25
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f00:	69bb      	ldr	r3, [r7, #24]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08006c90 	.word	0x08006c90
 8002f18:	00f42400 	.word	0x00f42400
 8002f1c:	007a1200 	.word	0x007a1200

08002f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	4904      	ldr	r1, [pc, #16]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f4e:	5ccb      	ldrb	r3, [r1, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08006c88 	.word	0x08006c88

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f68:	f7ff ffda 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0adb      	lsrs	r3, r3, #11
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	08006c88 	.word	0x08006c88

08002f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f98:	2300      	movs	r3, #0
 8002f9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002fa8:	f7ff f9ee 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 8002fac:	6178      	str	r0, [r7, #20]
 8002fae:	e014      	b.n	8002fda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4a24      	ldr	r2, [pc, #144]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	6593      	str	r3, [r2, #88]	; 0x58
 8002fbc:	4b22      	ldr	r3, [pc, #136]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fc8:	f7ff f9de 	bl	8002388 <HAL_PWREx_GetVoltageRange>
 8002fcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d10b      	bne.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d919      	bls.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2ba0      	cmp	r3, #160	; 0xa0
 8002fec:	d902      	bls.n	8002ff4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fee:	2302      	movs	r3, #2
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e013      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e010      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d902      	bls.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003000:	2303      	movs	r3, #3
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e00a      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b80      	cmp	r3, #128	; 0x80
 800300a:	d102      	bne.n	8003012 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800300c:	2302      	movs	r3, #2
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	e004      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d101      	bne.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 0207 	bic.w	r2, r3, #7
 8003024:	4909      	ldr	r1, [pc, #36]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	40022000 	.word	0x40022000

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003058:	2300      	movs	r3, #0
 800305a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800305c:	2300      	movs	r3, #0
 800305e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003068:	2b00      	cmp	r3, #0
 800306a:	d041      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003070:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003076:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800307a:	d824      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800307c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003086:	d81e      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800308c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003090:	d010      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b86      	ldr	r3, [pc, #536]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a85      	ldr	r2, [pc, #532]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fabb 	bl	8003624 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fba6 	bl	800380c <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d4:	4b76      	ldr	r3, [pc, #472]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030e2:	4973      	ldr	r1, [pc, #460]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d041      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003104:	d02a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003106:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800310a:	d824      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800310c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003110:	d008      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003116:	d81e      	bhi.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d010      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003122:	e018      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003124:	4b62      	ldr	r3, [pc, #392]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4a61      	ldr	r2, [pc, #388]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003130:	e015      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fa73 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003142:	e00c      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3320      	adds	r3, #32
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fb5e 	bl	800380c <RCCEx_PLLSAI2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003154:	e003      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	74fb      	strb	r3, [r7, #19]
      break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800315c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003164:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003172:	494f      	ldr	r1, [pc, #316]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800317a:	e001      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a0 	beq.w	80032ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a8:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	4a40      	ldr	r2, [pc, #256]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6593      	str	r3, [r2, #88]	; 0x58
 80031b4:	4b3e      	ldr	r3, [pc, #248]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031c4:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a3a      	ldr	r2, [pc, #232]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031d0:	f7fe fb9e 	bl	8001910 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031d6:	e009      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d8:	f7fe fb9a 	bl	8001910 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d902      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ea:	e005      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ef      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d15c      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031fe:	4b2c      	ldr	r3, [pc, #176]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003208:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01f      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	429a      	cmp	r2, r3
 800321a:	d019      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003226:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003228:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003248:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fe fb59 	bl	8001910 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003260:	e00b      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fb55 	bl	8001910 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d902      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	74fb      	strb	r3, [r7, #19]
            break;
 8003278:	e006      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ec      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800329e:	4904      	ldr	r1, [pc, #16]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032a6:	e009      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
 80032ac:	e006      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032bc:	7c7b      	ldrb	r3, [r7, #17]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d105      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c2:	4b9e      	ldr	r3, [pc, #632]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a9d      	ldr	r2, [pc, #628]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032da:	4b98      	ldr	r3, [pc, #608]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	f023 0203 	bic.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	4994      	ldr	r1, [pc, #592]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032fc:	4b8f      	ldr	r3, [pc, #572]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f023 020c 	bic.w	r2, r3, #12
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330a:	498c      	ldr	r1, [pc, #560]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800331e:	4b87      	ldr	r3, [pc, #540]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003324:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	4983      	ldr	r1, [pc, #524]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003340:	4b7e      	ldr	r3, [pc, #504]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	497b      	ldr	r1, [pc, #492]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003350:	4313      	orrs	r3, r2
 8003352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003370:	4972      	ldr	r1, [pc, #456]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003384:	4b6d      	ldr	r3, [pc, #436]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	496a      	ldr	r1, [pc, #424]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003394:	4313      	orrs	r3, r2
 8003396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00a      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	4961      	ldr	r1, [pc, #388]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033c8:	4b5c      	ldr	r3, [pc, #368]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d6:	4959      	ldr	r1, [pc, #356]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ea:	4b54      	ldr	r3, [pc, #336]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	4950      	ldr	r1, [pc, #320]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800340c:	4b4b      	ldr	r3, [pc, #300]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	4948      	ldr	r1, [pc, #288]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800342e:	4b43      	ldr	r3, [pc, #268]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	493f      	ldr	r1, [pc, #252]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d028      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003450:	4b3a      	ldr	r3, [pc, #232]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345e:	4937      	ldr	r1, [pc, #220]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800346e:	d106      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b32      	ldr	r3, [pc, #200]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a31      	ldr	r2, [pc, #196]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e011      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003486:	d10c      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f8c8 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	491f      	ldr	r1, [pc, #124]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034cc:	d106      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d8:	60d3      	str	r3, [r2, #12]
 80034da:	e011      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f899 	bl	8003624 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d02b      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351a:	4908      	ldr	r1, [pc, #32]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352a:	d109      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a02      	ldr	r2, [pc, #8]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003536:	60d3      	str	r3, [r2, #12]
 8003538:	e014      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2101      	movs	r1, #1
 8003550:	4618      	mov	r0, r3
 8003552:	f000 f867 	bl	8003624 <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003560:	7cfb      	ldrb	r3, [r7, #19]
 8003562:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d02f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003570:	4b2b      	ldr	r3, [pc, #172]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003576:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	4928      	ldr	r1, [pc, #160]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800358e:	d10d      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2102      	movs	r1, #2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f844 	bl	8003624 <RCCEx_PLLSAI1_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	74bb      	strb	r3, [r7, #18]
 80035aa:	e011      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3320      	adds	r3, #32
 80035ba:	2102      	movs	r1, #2
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f925 	bl	800380c <RCCEx_PLLSAI2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035dc:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	490d      	ldr	r1, [pc, #52]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003616:	7cbb      	ldrb	r3, [r7, #18]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000

08003624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003632:	4b75      	ldr	r3, [pc, #468]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800363e:	4b72      	ldr	r3, [pc, #456]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
       ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003656:	4b6c      	ldr	r3, [pc, #432]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
       ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d047      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e044      	b.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d018      	beq.n	80036aa <RCCEx_PLLSAI1_Config+0x86>
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d002      	beq.n	8003686 <RCCEx_PLLSAI1_Config+0x62>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d009      	beq.n	8003698 <RCCEx_PLLSAI1_Config+0x74>
 8003684:	e020      	b.n	80036c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e01a      	b.n	80036ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003698:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e013      	b.n	80036d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b57      	ldr	r3, [pc, #348]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b6:	4b54      	ldr	r3, [pc, #336]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c6:	e006      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e004      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036de:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4944      	ldr	r1, [pc, #272]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d17d      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003700:	4b41      	ldr	r3, [pc, #260]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a40      	ldr	r2, [pc, #256]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe f900 	bl	8001910 <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003714:	f7fe f8fc 	bl	8001910 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
        break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003728:	4b37      	ldr	r3, [pc, #220]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d160      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003740:	4b31      	ldr	r3, [pc, #196]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	0912      	lsrs	r2, r2, #4
 8003758:	0452      	lsls	r2, r2, #17
 800375a:	430a      	orrs	r2, r1
 800375c:	492a      	ldr	r1, [pc, #168]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	4313      	orrs	r3, r2
 8003760:	610b      	str	r3, [r1, #16]
 8003762:	e027      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003772:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	0211      	lsls	r1, r2, #8
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6912      	ldr	r2, [r2, #16]
 8003780:	0852      	lsrs	r2, r2, #1
 8003782:	3a01      	subs	r2, #1
 8003784:	0552      	lsls	r2, r2, #21
 8003786:	430a      	orrs	r2, r1
 8003788:	491f      	ldr	r1, [pc, #124]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	4313      	orrs	r3, r2
 800378c:	610b      	str	r3, [r1, #16]
 800378e:	e011      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003798:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6892      	ldr	r2, [r2, #8]
 80037a0:	0211      	lsls	r1, r2, #8
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6952      	ldr	r2, [r2, #20]
 80037a6:	0852      	lsrs	r2, r2, #1
 80037a8:	3a01      	subs	r2, #1
 80037aa:	0652      	lsls	r2, r2, #25
 80037ac:	430a      	orrs	r2, r1
 80037ae:	4916      	ldr	r1, [pc, #88]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037b4:	4b14      	ldr	r3, [pc, #80]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a13      	ldr	r2, [pc, #76]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe f8a6 	bl	8001910 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037c6:	e009      	b.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c8:	f7fe f8a2 	bl	8001910 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d902      	bls.n	80037dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	73fb      	strb	r3, [r7, #15]
          break;
 80037da:	e005      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	4904      	ldr	r1, [pc, #16]	; (8003808 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000

0800380c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800381a:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d018      	beq.n	8003858 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003826:	4b67      	ldr	r3, [pc, #412]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0203 	and.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d10d      	bne.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
       ||
 800383a:	2b00      	cmp	r3, #0
 800383c:	d009      	beq.n	8003852 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800383e:	4b61      	ldr	r3, [pc, #388]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
       ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d047      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e044      	b.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d018      	beq.n	8003892 <RCCEx_PLLSAI2_Config+0x86>
 8003860:	2b03      	cmp	r3, #3
 8003862:	d825      	bhi.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003864:	2b01      	cmp	r3, #1
 8003866:	d002      	beq.n	800386e <RCCEx_PLLSAI2_Config+0x62>
 8003868:	2b02      	cmp	r3, #2
 800386a:	d009      	beq.n	8003880 <RCCEx_PLLSAI2_Config+0x74>
 800386c:	e020      	b.n	80038b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800386e:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11d      	bne.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387e:	e01a      	b.n	80038b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003888:	2b00      	cmp	r3, #0
 800388a:	d116      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e013      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003892:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ae:	e006      	b.n	80038be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      break;
 80038b4:	e004      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b6:	bf00      	nop
 80038b8:	e002      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ba:	bf00      	nop
 80038bc:	e000      	b.n	80038c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038be:	bf00      	nop
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6819      	ldr	r1, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	430b      	orrs	r3, r1
 80038dc:	4939      	ldr	r1, [pc, #228]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038e2:	7bfb      	ldrb	r3, [r7, #15]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d167      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e8:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f4:	f7fe f80c 	bl	8001910 <HAL_GetTick>
 80038f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038fa:	e009      	b.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038fc:	f7fe f808 	bl	8001910 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d902      	bls.n	8003910 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	73fb      	strb	r3, [r7, #15]
        break;
 800390e:	e005      	b.n	800391c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003910:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ef      	bne.n	80038fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14a      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	0211      	lsls	r1, r2, #8
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68d2      	ldr	r2, [r2, #12]
 800393e:	0912      	lsrs	r2, r2, #4
 8003940:	0452      	lsls	r2, r2, #17
 8003942:	430a      	orrs	r2, r1
 8003944:	491f      	ldr	r1, [pc, #124]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	614b      	str	r3, [r1, #20]
 800394a:	e011      	b.n	8003970 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6912      	ldr	r2, [r2, #16]
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0652      	lsls	r2, r2, #25
 8003968:	430a      	orrs	r2, r1
 800396a:	4916      	ldr	r1, [pc, #88]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	4313      	orrs	r3, r2
 800396e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003970:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fd ffc8 	bl	8001910 <HAL_GetTick>
 8003980:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003982:	e009      	b.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003984:	f7fd ffc4 	bl	8001910 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d902      	bls.n	8003998 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	73fb      	strb	r3, [r7, #15]
          break;
 8003996:	e005      	b.n	80039a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0ef      	beq.n	8003984 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4904      	ldr	r1, [pc, #16]	; (80039c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000

080039c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e049      	b.n	8003a6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fdec 	bl	80015cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3304      	adds	r3, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 fe70 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e049      	b.n	8003b1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f841 	bl	8003b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f000 fe19 	bl	80046ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e03c      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d109      	bne.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x46>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	e02f      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d109      	bne.n	8003b98 <HAL_TIM_PWM_Start_DMA+0x60>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	e022      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d109      	bne.n	8003bb2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e015      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d109      	bne.n	8003bcc <HAL_TIM_PWM_Start_DMA+0x94>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	e008      	b.n	8003bde <HAL_TIM_PWM_Start_DMA+0xa6>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	e1ab      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e03c      	b.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d109      	bne.n	8003c1a <HAL_TIM_PWM_Start_DMA+0xe2>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	e02f      	b.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d109      	bne.n	8003c34 <HAL_TIM_PWM_Start_DMA+0xfc>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e022      	b.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d109      	bne.n	8003c4e <HAL_TIM_PWM_Start_DMA+0x116>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e015      	b.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d109      	bne.n	8003c68 <HAL_TIM_PWM_Start_DMA+0x130>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e008      	b.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x142>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bf0c      	ite	eq
 8003c74:	2301      	moveq	r3, #1
 8003c76:	2300      	movne	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d034      	beq.n	8003ce8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_TIM_PWM_Start_DMA+0x152>
 8003c84:	887b      	ldrh	r3, [r7, #2]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e157      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_Start_DMA+0x166>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c9c:	e026      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d104      	bne.n	8003cae <HAL_TIM_PWM_Start_DMA+0x176>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cac:	e01e      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start_DMA+0x186>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cbc:	e016      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start_DMA+0x196>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ccc:	e00e      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d104      	bne.n	8003cde <HAL_TIM_PWM_Start_DMA+0x1a6>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cdc:	e006      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ce6:	e001      	b.n	8003cec <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e128      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	f200 80ae 	bhi.w	8003e50 <HAL_TIM_PWM_Start_DMA+0x318>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003e51 	.word	0x08003e51
 8003d04:	08003e51 	.word	0x08003e51
 8003d08:	08003e51 	.word	0x08003e51
 8003d0c:	08003d79 	.word	0x08003d79
 8003d10:	08003e51 	.word	0x08003e51
 8003d14:	08003e51 	.word	0x08003e51
 8003d18:	08003e51 	.word	0x08003e51
 8003d1c:	08003dc1 	.word	0x08003dc1
 8003d20:	08003e51 	.word	0x08003e51
 8003d24:	08003e51 	.word	0x08003e51
 8003d28:	08003e51 	.word	0x08003e51
 8003d2c:	08003e09 	.word	0x08003e09
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	4a84      	ldr	r2, [pc, #528]	; (8003f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	4a83      	ldr	r2, [pc, #524]	; (8003f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	4a82      	ldr	r2, [pc, #520]	; (8003f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3334      	adds	r3, #52	; 0x34
 8003d54:	461a      	mov	r2, r3
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	f7fd ffd4 	bl	8001d04 <HAL_DMA_Start_IT>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0eb      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	60da      	str	r2, [r3, #12]
      break;
 8003d76:	e06e      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	4a72      	ldr	r2, [pc, #456]	; (8003f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	4a71      	ldr	r2, [pc, #452]	; (8003f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	4a70      	ldr	r2, [pc, #448]	; (8003f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3338      	adds	r3, #56	; 0x38
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	f7fd ffb0 	bl	8001d04 <HAL_DMA_Start_IT>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0c7      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dbc:	60da      	str	r2, [r3, #12]
      break;
 8003dbe:	e04a      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	4a60      	ldr	r2, [pc, #384]	; (8003f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a5f      	ldr	r2, [pc, #380]	; (8003f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a5e      	ldr	r2, [pc, #376]	; (8003f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	333c      	adds	r3, #60	; 0x3c
 8003de4:	461a      	mov	r2, r3
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	f7fd ff8c 	bl	8001d04 <HAL_DMA_Start_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0a3      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e04:	60da      	str	r2, [r3, #12]
      break;
 8003e06:	e026      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	4a4e      	ldr	r2, [pc, #312]	; (8003f48 <HAL_TIM_PWM_Start_DMA+0x410>)
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	4a4d      	ldr	r2, [pc, #308]	; (8003f4c <HAL_TIM_PWM_Start_DMA+0x414>)
 8003e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4a4c      	ldr	r2, [pc, #304]	; (8003f50 <HAL_TIM_PWM_Start_DMA+0x418>)
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3340      	adds	r3, #64	; 0x40
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	887b      	ldrh	r3, [r7, #2]
 8003e30:	f7fd ff68 	bl	8001d04 <HAL_DMA_Start_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07f      	b.n	8003f3e <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e4c:	60da      	str	r2, [r3, #12]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
      break;
 8003e54:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d16f      	bne.n	8003f3c <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2201      	movs	r2, #1
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 f84b 	bl	8004f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a39      	ldr	r2, [pc, #228]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a37      	ldr	r2, [pc, #220]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a36      	ldr	r2, [pc, #216]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a34      	ldr	r2, [pc, #208]	; (8003f60 <HAL_TIM_PWM_Start_DMA+0x428>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIM_PWM_Start_DMA+0x364>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a33      	ldr	r2, [pc, #204]	; (8003f64 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_PWM_Start_DMA+0x368>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d007      	beq.n	8003eb6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <HAL_TIM_PWM_Start_DMA+0x430>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a24      	ldr	r2, [pc, #144]	; (8003f6c <HAL_TIM_PWM_Start_DMA+0x434>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_TIM_PWM_Start_DMA+0x438>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <HAL_TIM_PWM_Start_DMA+0x420>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_PWM_Start_DMA+0x3c4>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <HAL_TIM_PWM_Start_DMA+0x424>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d115      	bne.n	8003f28 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d015      	beq.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x402>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d011      	beq.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e008      	b.n	8003f3a <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e000      	b.n	8003f3c <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	080045dd 	.word	0x080045dd
 8003f4c:	08004685 	.word	0x08004685
 8003f50:	0800454b 	.word	0x0800454b
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40013400 	.word	0x40013400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	40000800 	.word	0x40000800
 8003f70:	40000c00 	.word	0x40000c00
 8003f74:	00010007 	.word	0x00010007

08003f78 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d855      	bhi.n	8004038 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fc9 	.word	0x08003fc9
 8003f98:	08004039 	.word	0x08004039
 8003f9c:	08004039 	.word	0x08004039
 8003fa0:	08004039 	.word	0x08004039
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08004039 	.word	0x08004039
 8003fac:	08004039 	.word	0x08004039
 8003fb0:	08004039 	.word	0x08004039
 8003fb4:	08004001 	.word	0x08004001
 8003fb8:	08004039 	.word	0x08004039
 8003fbc:	08004039 	.word	0x08004039
 8003fc0:	08004039 	.word	0x08004039
 8003fc4:	0800401d 	.word	0x0800401d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd fef1 	bl	8001dc4 <HAL_DMA_Abort_IT>
      break;
 8003fe2:	e02c      	b.n	800403e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fee3 	bl	8001dc4 <HAL_DMA_Abort_IT>
      break;
 8003ffe:	e01e      	b.n	800403e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800400e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4618      	mov	r0, r3
 8004016:	f7fd fed5 	bl	8001dc4 <HAL_DMA_Abort_IT>
      break;
 800401a:	e010      	b.n	800403e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800402a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fec7 	bl	8001dc4 <HAL_DMA_Abort_IT>
      break;
 8004036:	e002      	b.n	800403e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
      break;
 800403c:	bf00      	nop
  }

  if (status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 8081 	bne.w	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 ff56 	bl	8004f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3e      	ldr	r2, [pc, #248]	; (8004154 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3d      	ldr	r2, [pc, #244]	; (8004158 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a3b      	ldr	r2, [pc, #236]	; (800415c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a3a      	ldr	r2, [pc, #232]	; (8004160 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a38      	ldr	r2, [pc, #224]	; (8004164 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <HAL_TIM_PWM_Stop_DMA+0x112>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_TIM_PWM_Stop_DMA+0x114>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d017      	beq.n	80040c0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f241 1311 	movw	r3, #4369	; 0x1111
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10f      	bne.n	80040c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	f240 4344 	movw	r3, #1092	; 0x444
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_PWM_Stop_DMA+0x148>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10f      	bne.n	80040f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	f240 4344 	movw	r3, #1092	; 0x444
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d107      	bne.n	80040f0 <HAL_TIM_PWM_Stop_DMA+0x178>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0201 	bic.w	r2, r2, #1
 80040ee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_PWM_Stop_DMA+0x188>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fe:	e023      	b.n	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b04      	cmp	r3, #4
 8004104:	d104      	bne.n	8004110 <HAL_TIM_PWM_Stop_DMA+0x198>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800410e:	e01b      	b.n	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b08      	cmp	r3, #8
 8004114:	d104      	bne.n	8004120 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800411e:	e013      	b.n	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d104      	bne.n	8004130 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800412e:	e00b      	b.n	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b10      	cmp	r3, #16
 8004134:	d104      	bne.n	8004140 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413e:	e003      	b.n	8004148 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004182:	2302      	movs	r3, #2
 8004184:	e0ff      	b.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b14      	cmp	r3, #20
 8004192:	f200 80f0 	bhi.w	8004376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	08004377 	.word	0x08004377
 80041a4:	08004377 	.word	0x08004377
 80041a8:	08004377 	.word	0x08004377
 80041ac:	08004231 	.word	0x08004231
 80041b0:	08004377 	.word	0x08004377
 80041b4:	08004377 	.word	0x08004377
 80041b8:	08004377 	.word	0x08004377
 80041bc:	08004273 	.word	0x08004273
 80041c0:	08004377 	.word	0x08004377
 80041c4:	08004377 	.word	0x08004377
 80041c8:	08004377 	.word	0x08004377
 80041cc:	080042b3 	.word	0x080042b3
 80041d0:	08004377 	.word	0x08004377
 80041d4:	08004377 	.word	0x08004377
 80041d8:	08004377 	.word	0x08004377
 80041dc:	080042f5 	.word	0x080042f5
 80041e0:	08004377 	.word	0x08004377
 80041e4:	08004377 	.word	0x08004377
 80041e8:	08004377 	.word	0x08004377
 80041ec:	08004335 	.word	0x08004335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb12 	bl	8004820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0208 	orr.w	r2, r2, #8
 800420a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0204 	bic.w	r2, r2, #4
 800421a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6999      	ldr	r1, [r3, #24]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	619a      	str	r2, [r3, #24]
      break;
 800422e:	e0a5      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fb82 	bl	8004940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6999      	ldr	r1, [r3, #24]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	619a      	str	r2, [r3, #24]
      break;
 8004270:	e084      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fbeb 	bl	8004a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0208 	orr.w	r2, r2, #8
 800428c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69da      	ldr	r2, [r3, #28]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0204 	bic.w	r2, r2, #4
 800429c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69d9      	ldr	r1, [r3, #28]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	61da      	str	r2, [r3, #28]
      break;
 80042b0:	e064      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fc53 	bl	8004b64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69d9      	ldr	r1, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	021a      	lsls	r2, r3, #8
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	61da      	str	r2, [r3, #28]
      break;
 80042f2:	e043      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fc9c 	bl	8004c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0208 	orr.w	r2, r2, #8
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0204 	bic.w	r2, r2, #4
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004332:	e023      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fce0 	bl	8004d00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004374:	e002      	b.n	800437c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
      break;
 800437a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop

08004390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_ConfigClockSource+0x1c>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e0b6      	b.n	800451a <HAL_TIM_ConfigClockSource+0x18a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e8:	d03e      	beq.n	8004468 <HAL_TIM_ConfigClockSource+0xd8>
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	f200 8087 	bhi.w	8004500 <HAL_TIM_ConfigClockSource+0x170>
 80043f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f6:	f000 8086 	beq.w	8004506 <HAL_TIM_ConfigClockSource+0x176>
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fe:	d87f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004400:	2b70      	cmp	r3, #112	; 0x70
 8004402:	d01a      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xaa>
 8004404:	2b70      	cmp	r3, #112	; 0x70
 8004406:	d87b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004408:	2b60      	cmp	r3, #96	; 0x60
 800440a:	d050      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0x11e>
 800440c:	2b60      	cmp	r3, #96	; 0x60
 800440e:	d877      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004410:	2b50      	cmp	r3, #80	; 0x50
 8004412:	d03c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0xfe>
 8004414:	2b50      	cmp	r3, #80	; 0x50
 8004416:	d873      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004418:	2b40      	cmp	r3, #64	; 0x40
 800441a:	d058      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0x13e>
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d86f      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004420:	2b30      	cmp	r3, #48	; 0x30
 8004422:	d064      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15e>
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	d86b      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004428:	2b20      	cmp	r3, #32
 800442a:	d060      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15e>
 800442c:	2b20      	cmp	r3, #32
 800442e:	d867      	bhi.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d05c      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15e>
 8004434:	2b10      	cmp	r3, #16
 8004436:	d05a      	beq.n	80044ee <HAL_TIM_ConfigClockSource+0x15e>
 8004438:	e062      	b.n	8004500 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800444a:	f000 fd39 	bl	8004ec0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800445c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	609a      	str	r2, [r3, #8]
      break;
 8004466:	e04f      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004478:	f000 fd22 	bl	8004ec0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800448a:	609a      	str	r2, [r3, #8]
      break;
 800448c:	e03c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	461a      	mov	r2, r3
 800449c:	f000 fc96 	bl	8004dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2150      	movs	r1, #80	; 0x50
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fcef 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 80044ac:	e02c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ba:	461a      	mov	r2, r3
 80044bc:	f000 fcb5 	bl	8004e2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2160      	movs	r1, #96	; 0x60
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fcdf 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 80044cc:	e01c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	461a      	mov	r2, r3
 80044dc:	f000 fc76 	bl	8004dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fccf 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 80044ec:	e00c      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 fcc6 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 80044fe:	e003      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      break;
 8004504:	e000      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d107      	bne.n	8004572 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004570:	e02a      	b.n	80045c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d107      	bne.n	800458c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2202      	movs	r2, #2
 8004580:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800458a:	e01d      	b.n	80045c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d107      	bne.n	80045a6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2204      	movs	r2, #4
 800459a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	e010      	b.n	80045c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d107      	bne.n	80045c0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2208      	movs	r2, #8
 80045b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045be:	e003      	b.n	80045c8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f7ff ffb4 	bl	8004536 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d10b      	bne.n	800460c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d136      	bne.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800460a:	e031      	b.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d10b      	bne.n	800462e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2202      	movs	r2, #2
 800461a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d125      	bne.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800462c:	e020      	b.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d10b      	bne.n	8004650 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2204      	movs	r2, #4
 800463c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69db      	ldr	r3, [r3, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d114      	bne.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464e:	e00f      	b.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	429a      	cmp	r2, r3
 8004658:	d10a      	bne.n	8004670 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2208      	movs	r2, #8
 800465e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f7fc fd35 	bl	80010e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	771a      	strb	r2, [r3, #28]
}
 800467c:	bf00      	nop
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d103      	bne.n	80046a4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	771a      	strb	r2, [r3, #28]
 80046a2:	e019      	b.n	80046d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d103      	bne.n	80046b6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2202      	movs	r2, #2
 80046b2:	771a      	strb	r2, [r3, #28]
 80046b4:	e010      	b.n	80046d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d103      	bne.n	80046c8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2204      	movs	r2, #4
 80046c4:	771a      	strb	r2, [r3, #28]
 80046c6:	e007      	b.n	80046d8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d102      	bne.n	80046d8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2208      	movs	r2, #8
 80046d6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff ff22 	bl	8004522 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a40      	ldr	r2, [pc, #256]	; (8004800 <TIM_Base_SetConfig+0x114>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470a:	d00f      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <TIM_Base_SetConfig+0x118>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00b      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <TIM_Base_SetConfig+0x11c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d007      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a3b      	ldr	r2, [pc, #236]	; (800480c <TIM_Base_SetConfig+0x120>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0x40>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a3a      	ldr	r2, [pc, #232]	; (8004810 <TIM_Base_SetConfig+0x124>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <TIM_Base_SetConfig+0x114>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01f      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474c:	d01b      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2c      	ldr	r2, [pc, #176]	; (8004804 <TIM_Base_SetConfig+0x118>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d017      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2b      	ldr	r2, [pc, #172]	; (8004808 <TIM_Base_SetConfig+0x11c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2a      	ldr	r2, [pc, #168]	; (800480c <TIM_Base_SetConfig+0x120>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a29      	ldr	r2, [pc, #164]	; (8004810 <TIM_Base_SetConfig+0x124>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a28      	ldr	r2, [pc, #160]	; (8004814 <TIM_Base_SetConfig+0x128>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a27      	ldr	r2, [pc, #156]	; (8004818 <TIM_Base_SetConfig+0x12c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a26      	ldr	r2, [pc, #152]	; (800481c <TIM_Base_SetConfig+0x130>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d108      	bne.n	8004798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <TIM_Base_SetConfig+0x114>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00f      	beq.n	80047e4 <TIM_Base_SetConfig+0xf8>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a12      	ldr	r2, [pc, #72]	; (8004810 <TIM_Base_SetConfig+0x124>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00b      	beq.n	80047e4 <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a11      	ldr	r2, [pc, #68]	; (8004814 <TIM_Base_SetConfig+0x128>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d007      	beq.n	80047e4 <TIM_Base_SetConfig+0xf8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a10      	ldr	r2, [pc, #64]	; (8004818 <TIM_Base_SetConfig+0x12c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d003      	beq.n	80047e4 <TIM_Base_SetConfig+0xf8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a0f      	ldr	r2, [pc, #60]	; (800481c <TIM_Base_SetConfig+0x130>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	615a      	str	r2, [r3, #20]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40013400 	.word	0x40013400
 8004814:	40014000 	.word	0x40014000
 8004818:	40014400 	.word	0x40014400
 800481c:	40014800 	.word	0x40014800

08004820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f023 0302 	bic.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a2c      	ldr	r2, [pc, #176]	; (800492c <TIM_OC1_SetConfig+0x10c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00f      	beq.n	80048a0 <TIM_OC1_SetConfig+0x80>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <TIM_OC1_SetConfig+0x110>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <TIM_OC1_SetConfig+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <TIM_OC1_SetConfig+0x114>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <TIM_OC1_SetConfig+0x80>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <TIM_OC1_SetConfig+0x118>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <TIM_OC1_SetConfig+0x80>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a28      	ldr	r2, [pc, #160]	; (800493c <TIM_OC1_SetConfig+0x11c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d10c      	bne.n	80048ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0308 	bic.w	r3, r3, #8
 80048a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <TIM_OC1_SetConfig+0x10c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d00f      	beq.n	80048e2 <TIM_OC1_SetConfig+0xc2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <TIM_OC1_SetConfig+0x110>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <TIM_OC1_SetConfig+0xc2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a19      	ldr	r2, [pc, #100]	; (8004934 <TIM_OC1_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <TIM_OC1_SetConfig+0xc2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a18      	ldr	r2, [pc, #96]	; (8004938 <TIM_OC1_SetConfig+0x118>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC1_SetConfig+0xc2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a17      	ldr	r2, [pc, #92]	; (800493c <TIM_OC1_SetConfig+0x11c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d111      	bne.n	8004906 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40014000 	.word	0x40014000
 8004938:	40014400 	.word	0x40014400
 800493c:	40014800 	.word	0x40014800

08004940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f023 0210 	bic.w	r2, r3, #16
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0320 	bic.w	r3, r3, #32
 800498e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <TIM_OC2_SetConfig+0x100>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_OC2_SetConfig+0x6c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a27      	ldr	r2, [pc, #156]	; (8004a44 <TIM_OC2_SetConfig+0x104>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d10d      	bne.n	80049c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a1d      	ldr	r2, [pc, #116]	; (8004a40 <TIM_OC2_SetConfig+0x100>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_OC2_SetConfig+0xb0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <TIM_OC2_SetConfig+0x104>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_OC2_SetConfig+0xb0>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <TIM_OC2_SetConfig+0x108>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_OC2_SetConfig+0xb0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <TIM_OC2_SetConfig+0x10c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_OC2_SetConfig+0xb0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <TIM_OC2_SetConfig+0x110>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d113      	bne.n	8004a18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0303 	bic.w	r3, r3, #3
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <TIM_OC3_SetConfig+0xfc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_OC3_SetConfig+0x6a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a26      	ldr	r2, [pc, #152]	; (8004b54 <TIM_OC3_SetConfig+0x100>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10d      	bne.n	8004ada <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <TIM_OC3_SetConfig+0xfc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_OC3_SetConfig+0xae>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1b      	ldr	r2, [pc, #108]	; (8004b54 <TIM_OC3_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_OC3_SetConfig+0xae>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a1a      	ldr	r2, [pc, #104]	; (8004b58 <TIM_OC3_SetConfig+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_OC3_SetConfig+0xae>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a19      	ldr	r2, [pc, #100]	; (8004b5c <TIM_OC3_SetConfig+0x108>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_OC3_SetConfig+0xae>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <TIM_OC3_SetConfig+0x10c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d113      	bne.n	8004b2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	011b      	lsls	r3, r3, #4
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	621a      	str	r2, [r3, #32]
}
 8004b44:	bf00      	nop
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40013400 	.word	0x40013400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800

08004b64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <TIM_OC4_SetConfig+0xc0>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <TIM_OC4_SetConfig+0x84>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <TIM_OC4_SetConfig+0xc4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_OC4_SetConfig+0x84>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <TIM_OC4_SetConfig+0xc8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_OC4_SetConfig+0x84>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <TIM_OC4_SetConfig+0xcc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC4_SetConfig+0x84>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <TIM_OC4_SetConfig+0xd0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d109      	bne.n	8004bfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40013400 	.word	0x40013400
 8004c2c:	40014000 	.word	0x40014000
 8004c30:	40014400 	.word	0x40014400
 8004c34:	40014800 	.word	0x40014800

08004c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <TIM_OC5_SetConfig+0xb4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_OC5_SetConfig+0x7a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <TIM_OC5_SetConfig+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_OC5_SetConfig+0x7a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <TIM_OC5_SetConfig+0xbc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_OC5_SetConfig+0x7a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <TIM_OC5_SetConfig+0xc0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_OC5_SetConfig+0x7a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <TIM_OC5_SetConfig+0xc4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d109      	bne.n	8004cc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	621a      	str	r2, [r3, #32]
}
 8004ce0:	bf00      	nop
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40013400 	.word	0x40013400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40014400 	.word	0x40014400
 8004cfc:	40014800 	.word	0x40014800

08004d00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	051b      	lsls	r3, r3, #20
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <TIM_OC6_SetConfig+0xb8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00f      	beq.n	8004d7c <TIM_OC6_SetConfig+0x7c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <TIM_OC6_SetConfig+0xbc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_OC6_SetConfig+0x7c>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <TIM_OC6_SetConfig+0xc0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_OC6_SetConfig+0x7c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	; (8004dc4 <TIM_OC6_SetConfig+0xc4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_OC6_SetConfig+0x7c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <TIM_OC6_SetConfig+0xc8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d109      	bne.n	8004d90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	029b      	lsls	r3, r3, #10
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	621a      	str	r2, [r3, #32]
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40013400 	.word	0x40013400
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40014400 	.word	0x40014400
 8004dc8:	40014800 	.word	0x40014800

08004dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	f023 0201 	bic.w	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f023 030a 	bic.w	r3, r3, #10
 8004e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0210 	bic.w	r2, r3, #16
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	031b      	lsls	r3, r3, #12
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f043 0307 	orr.w	r3, r3, #7
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	2201      	movs	r2, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1a      	ldr	r2, [r3, #32]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	401a      	ands	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e068      	b.n	8005036 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2e      	ldr	r2, [pc, #184]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01d      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd6:	d018      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1b      	ldr	r2, [pc, #108]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d009      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d004      	beq.n	800500a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d10c      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005010:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40014000 	.word	0x40014000

0800505c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005074:	2302      	movs	r3, #2
 8005076:	e065      	b.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d004      	beq.n	8005106 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a14      	ldr	r2, [pc, #80]	; (8005154 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d115      	bne.n	8005132 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	051b      	lsls	r3, r3, #20
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40013400 	.word	0x40013400

08005158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e040      	b.n	80051ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fada 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	; 0x24
 8005184:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f82c 	bl	80051f4 <UART_SetConfig>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e022      	b.n	80051ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fad8 	bl	8005764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fb5f 	bl	80058a8 <UART_CheckIdleState>
 80051ea:	4603      	mov	r3, r0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b08a      	sub	sp, #40	; 0x28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	4313      	orrs	r3, r2
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4ba4      	ldr	r3, [pc, #656]	; (80054b4 <UART_SetConfig+0x2c0>)
 8005224:	4013      	ands	r3, r2
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800522c:	430b      	orrs	r3, r1
 800522e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a99      	ldr	r2, [pc, #612]	; (80054b8 <UART_SetConfig+0x2c4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	4313      	orrs	r3, r2
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	430a      	orrs	r2, r1
 8005272:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a90      	ldr	r2, [pc, #576]	; (80054bc <UART_SetConfig+0x2c8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d126      	bne.n	80052cc <UART_SetConfig+0xd8>
 800527e:	4b90      	ldr	r3, [pc, #576]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b03      	cmp	r3, #3
 800528a:	d81b      	bhi.n	80052c4 <UART_SetConfig+0xd0>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <UART_SetConfig+0xa0>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052b5 	.word	0x080052b5
 800529c:	080052ad 	.word	0x080052ad
 80052a0:	080052bd 	.word	0x080052bd
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e116      	b.n	80054da <UART_SetConfig+0x2e6>
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b2:	e112      	b.n	80054da <UART_SetConfig+0x2e6>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e10e      	b.n	80054da <UART_SetConfig+0x2e6>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e10a      	b.n	80054da <UART_SetConfig+0x2e6>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e106      	b.n	80054da <UART_SetConfig+0x2e6>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7c      	ldr	r2, [pc, #496]	; (80054c4 <UART_SetConfig+0x2d0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d138      	bne.n	8005348 <UART_SetConfig+0x154>
 80052d6:	4b7a      	ldr	r3, [pc, #488]	; (80054c0 <UART_SetConfig+0x2cc>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	d82d      	bhi.n	8005340 <UART_SetConfig+0x14c>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <UART_SetConfig+0xf8>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005321 	.word	0x08005321
 80052f0:	08005341 	.word	0x08005341
 80052f4:	08005341 	.word	0x08005341
 80052f8:	08005341 	.word	0x08005341
 80052fc:	08005331 	.word	0x08005331
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
 800530c:	08005329 	.word	0x08005329
 8005310:	08005341 	.word	0x08005341
 8005314:	08005341 	.word	0x08005341
 8005318:	08005341 	.word	0x08005341
 800531c:	08005339 	.word	0x08005339
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005326:	e0d8      	b.n	80054da <UART_SetConfig+0x2e6>
 8005328:	2302      	movs	r3, #2
 800532a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532e:	e0d4      	b.n	80054da <UART_SetConfig+0x2e6>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e0d0      	b.n	80054da <UART_SetConfig+0x2e6>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e0cc      	b.n	80054da <UART_SetConfig+0x2e6>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e0c8      	b.n	80054da <UART_SetConfig+0x2e6>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a5e      	ldr	r2, [pc, #376]	; (80054c8 <UART_SetConfig+0x2d4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d125      	bne.n	800539e <UART_SetConfig+0x1aa>
 8005352:	4b5b      	ldr	r3, [pc, #364]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800535c:	2b30      	cmp	r3, #48	; 0x30
 800535e:	d016      	beq.n	800538e <UART_SetConfig+0x19a>
 8005360:	2b30      	cmp	r3, #48	; 0x30
 8005362:	d818      	bhi.n	8005396 <UART_SetConfig+0x1a2>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d00a      	beq.n	800537e <UART_SetConfig+0x18a>
 8005368:	2b20      	cmp	r3, #32
 800536a:	d814      	bhi.n	8005396 <UART_SetConfig+0x1a2>
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <UART_SetConfig+0x182>
 8005370:	2b10      	cmp	r3, #16
 8005372:	d008      	beq.n	8005386 <UART_SetConfig+0x192>
 8005374:	e00f      	b.n	8005396 <UART_SetConfig+0x1a2>
 8005376:	2300      	movs	r3, #0
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537c:	e0ad      	b.n	80054da <UART_SetConfig+0x2e6>
 800537e:	2302      	movs	r3, #2
 8005380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005384:	e0a9      	b.n	80054da <UART_SetConfig+0x2e6>
 8005386:	2304      	movs	r3, #4
 8005388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538c:	e0a5      	b.n	80054da <UART_SetConfig+0x2e6>
 800538e:	2308      	movs	r3, #8
 8005390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005394:	e0a1      	b.n	80054da <UART_SetConfig+0x2e6>
 8005396:	2310      	movs	r3, #16
 8005398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539c:	e09d      	b.n	80054da <UART_SetConfig+0x2e6>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a4a      	ldr	r2, [pc, #296]	; (80054cc <UART_SetConfig+0x2d8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d125      	bne.n	80053f4 <UART_SetConfig+0x200>
 80053a8:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <UART_SetConfig+0x2cc>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053b2:	2bc0      	cmp	r3, #192	; 0xc0
 80053b4:	d016      	beq.n	80053e4 <UART_SetConfig+0x1f0>
 80053b6:	2bc0      	cmp	r3, #192	; 0xc0
 80053b8:	d818      	bhi.n	80053ec <UART_SetConfig+0x1f8>
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d00a      	beq.n	80053d4 <UART_SetConfig+0x1e0>
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d814      	bhi.n	80053ec <UART_SetConfig+0x1f8>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <UART_SetConfig+0x1d8>
 80053c6:	2b40      	cmp	r3, #64	; 0x40
 80053c8:	d008      	beq.n	80053dc <UART_SetConfig+0x1e8>
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x1f8>
 80053cc:	2300      	movs	r3, #0
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d2:	e082      	b.n	80054da <UART_SetConfig+0x2e6>
 80053d4:	2302      	movs	r3, #2
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053da:	e07e      	b.n	80054da <UART_SetConfig+0x2e6>
 80053dc:	2304      	movs	r3, #4
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e2:	e07a      	b.n	80054da <UART_SetConfig+0x2e6>
 80053e4:	2308      	movs	r3, #8
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e076      	b.n	80054da <UART_SetConfig+0x2e6>
 80053ec:	2310      	movs	r3, #16
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f2:	e072      	b.n	80054da <UART_SetConfig+0x2e6>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a35      	ldr	r2, [pc, #212]	; (80054d0 <UART_SetConfig+0x2dc>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d12a      	bne.n	8005454 <UART_SetConfig+0x260>
 80053fe:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540c:	d01a      	beq.n	8005444 <UART_SetConfig+0x250>
 800540e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005412:	d81b      	bhi.n	800544c <UART_SetConfig+0x258>
 8005414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005418:	d00c      	beq.n	8005434 <UART_SetConfig+0x240>
 800541a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541e:	d815      	bhi.n	800544c <UART_SetConfig+0x258>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <UART_SetConfig+0x238>
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d008      	beq.n	800543c <UART_SetConfig+0x248>
 800542a:	e00f      	b.n	800544c <UART_SetConfig+0x258>
 800542c:	2300      	movs	r3, #0
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e052      	b.n	80054da <UART_SetConfig+0x2e6>
 8005434:	2302      	movs	r3, #2
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e04e      	b.n	80054da <UART_SetConfig+0x2e6>
 800543c:	2304      	movs	r3, #4
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e04a      	b.n	80054da <UART_SetConfig+0x2e6>
 8005444:	2308      	movs	r3, #8
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e046      	b.n	80054da <UART_SetConfig+0x2e6>
 800544c:	2310      	movs	r3, #16
 800544e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005452:	e042      	b.n	80054da <UART_SetConfig+0x2e6>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <UART_SetConfig+0x2c4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d13a      	bne.n	80054d4 <UART_SetConfig+0x2e0>
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800546c:	d01a      	beq.n	80054a4 <UART_SetConfig+0x2b0>
 800546e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005472:	d81b      	bhi.n	80054ac <UART_SetConfig+0x2b8>
 8005474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005478:	d00c      	beq.n	8005494 <UART_SetConfig+0x2a0>
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800547e:	d815      	bhi.n	80054ac <UART_SetConfig+0x2b8>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <UART_SetConfig+0x298>
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d008      	beq.n	800549c <UART_SetConfig+0x2a8>
 800548a:	e00f      	b.n	80054ac <UART_SetConfig+0x2b8>
 800548c:	2300      	movs	r3, #0
 800548e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005492:	e022      	b.n	80054da <UART_SetConfig+0x2e6>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549a:	e01e      	b.n	80054da <UART_SetConfig+0x2e6>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a2:	e01a      	b.n	80054da <UART_SetConfig+0x2e6>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054aa:	e016      	b.n	80054da <UART_SetConfig+0x2e6>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054b2:	e012      	b.n	80054da <UART_SetConfig+0x2e6>
 80054b4:	efff69f3 	.word	0xefff69f3
 80054b8:	40008000 	.word	0x40008000
 80054bc:	40013800 	.word	0x40013800
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40004400 	.word	0x40004400
 80054c8:	40004800 	.word	0x40004800
 80054cc:	40004c00 	.word	0x40004c00
 80054d0:	40005000 	.word	0x40005000
 80054d4:	2310      	movs	r3, #16
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a9f      	ldr	r2, [pc, #636]	; (800575c <UART_SetConfig+0x568>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d17a      	bne.n	80055da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d824      	bhi.n	8005536 <UART_SetConfig+0x342>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0x300>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005537 	.word	0x08005537
 8005504:	08005527 	.word	0x08005527
 8005508:	08005537 	.word	0x08005537
 800550c:	08005537 	.word	0x08005537
 8005510:	08005537 	.word	0x08005537
 8005514:	0800552f 	.word	0x0800552f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005518:	f7fd fd0e 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 800551c:	61f8      	str	r0, [r7, #28]
        break;
 800551e:	e010      	b.n	8005542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005520:	4b8f      	ldr	r3, [pc, #572]	; (8005760 <UART_SetConfig+0x56c>)
 8005522:	61fb      	str	r3, [r7, #28]
        break;
 8005524:	e00d      	b.n	8005542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005526:	f7fd fc6f 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 800552a:	61f8      	str	r0, [r7, #28]
        break;
 800552c:	e009      	b.n	8005542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e005      	b.n	8005542 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80fb 	beq.w	8005740 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	4413      	add	r3, r2
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	429a      	cmp	r2, r3
 8005558:	d305      	bcc.n	8005566 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	429a      	cmp	r2, r3
 8005564:	d903      	bls.n	800556e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800556c:	e0e8      	b.n	8005740 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2200      	movs	r2, #0
 8005572:	461c      	mov	r4, r3
 8005574:	4615      	mov	r5, r2
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	022b      	lsls	r3, r5, #8
 8005580:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005584:	0222      	lsls	r2, r4, #8
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	6849      	ldr	r1, [r1, #4]
 800558a:	0849      	lsrs	r1, r1, #1
 800558c:	2000      	movs	r0, #0
 800558e:	4688      	mov	r8, r1
 8005590:	4681      	mov	r9, r0
 8005592:	eb12 0a08 	adds.w	sl, r2, r8
 8005596:	eb43 0b09 	adc.w	fp, r3, r9
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055a8:	4650      	mov	r0, sl
 80055aa:	4659      	mov	r1, fp
 80055ac:	f7fb fafa 	bl	8000ba4 <__aeabi_uldivmod>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4613      	mov	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055be:	d308      	bcc.n	80055d2 <UART_SetConfig+0x3de>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c6:	d204      	bcs.n	80055d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	60da      	str	r2, [r3, #12]
 80055d0:	e0b6      	b.n	8005740 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055d8:	e0b2      	b.n	8005740 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d15e      	bne.n	80056a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d828      	bhi.n	800563e <UART_SetConfig+0x44a>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x400>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	0800563f 	.word	0x0800563f
 8005604:	0800562f 	.word	0x0800562f
 8005608:	0800563f 	.word	0x0800563f
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800563f 	.word	0x0800563f
 8005614:	08005637 	.word	0x08005637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7fd fc8e 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 800561c:	61f8      	str	r0, [r7, #28]
        break;
 800561e:	e014      	b.n	800564a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005620:	f7fd fca0 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 8005624:	61f8      	str	r0, [r7, #28]
        break;
 8005626:	e010      	b.n	800564a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b4d      	ldr	r3, [pc, #308]	; (8005760 <UART_SetConfig+0x56c>)
 800562a:	61fb      	str	r3, [r7, #28]
        break;
 800562c:	e00d      	b.n	800564a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7fd fbeb 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 8005632:	61f8      	str	r0, [r7, #28]
        break;
 8005634:	e009      	b.n	800564a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563a:	61fb      	str	r3, [r7, #28]
        break;
 800563c:	e005      	b.n	800564a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d077      	beq.n	8005740 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005a      	lsls	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	441a      	add	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b0f      	cmp	r3, #15
 800566a:	d916      	bls.n	800569a <UART_SetConfig+0x4a6>
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005672:	d212      	bcs.n	800569a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f023 030f 	bic.w	r3, r3, #15
 800567c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	085b      	lsrs	r3, r3, #1
 8005682:	b29b      	uxth	r3, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	b29a      	uxth	r2, r3
 800568a:	8afb      	ldrh	r3, [r7, #22]
 800568c:	4313      	orrs	r3, r2
 800568e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	8afa      	ldrh	r2, [r7, #22]
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	e052      	b.n	8005740 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80056a0:	e04e      	b.n	8005740 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d827      	bhi.n	80056fa <UART_SetConfig+0x506>
 80056aa:	a201      	add	r2, pc, #4	; (adr r2, 80056b0 <UART_SetConfig+0x4bc>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	080056fb 	.word	0x080056fb
 80056c0:	080056eb 	.word	0x080056eb
 80056c4:	080056fb 	.word	0x080056fb
 80056c8:	080056fb 	.word	0x080056fb
 80056cc:	080056fb 	.word	0x080056fb
 80056d0:	080056f3 	.word	0x080056f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d4:	f7fd fc30 	bl	8002f38 <HAL_RCC_GetPCLK1Freq>
 80056d8:	61f8      	str	r0, [r7, #28]
        break;
 80056da:	e014      	b.n	8005706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7fd fc42 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 80056e0:	61f8      	str	r0, [r7, #28]
        break;
 80056e2:	e010      	b.n	8005706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <UART_SetConfig+0x56c>)
 80056e6:	61fb      	str	r3, [r7, #28]
        break;
 80056e8:	e00d      	b.n	8005706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ea:	f7fd fb8d 	bl	8002e08 <HAL_RCC_GetSysClockFreq>
 80056ee:	61f8      	str	r0, [r7, #28]
        break;
 80056f0:	e009      	b.n	8005706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f6:	61fb      	str	r3, [r7, #28]
        break;
 80056f8:	e005      	b.n	8005706 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005704:	bf00      	nop
    }

    if (pclk != 0U)
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d019      	beq.n	8005740 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	085a      	lsrs	r2, r3, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	441a      	add	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d909      	bls.n	800573a <UART_SetConfig+0x546>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572c:	d205      	bcs.n	800573a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e002      	b.n	8005740 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800574c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005750:	4618      	mov	r0, r3
 8005752:	3728      	adds	r7, #40	; 0x28
 8005754:	46bd      	mov	sp, r7
 8005756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575a:	bf00      	nop
 800575c:	40008000 	.word	0x40008000
 8005760:	00f42400 	.word	0x00f42400

08005764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005862:	d10a      	bne.n	800587a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058b8:	f7fc f82a 	bl	8001910 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10e      	bne.n	80058ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f82d 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e023      	b.n	8005932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d10e      	bne.n	8005916 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f817 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00d      	b.n	8005932 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b09c      	sub	sp, #112	; 0x70
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e0a5      	b.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	f000 80a1 	beq.w	8005a98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005956:	f7fb ffdb 	bl	8001910 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005962:	429a      	cmp	r2, r3
 8005964:	d302      	bcc.n	800596c <UART_WaitOnFlagUntilTimeout+0x32>
 8005966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005968:	2b00      	cmp	r3, #0
 800596a:	d13e      	bne.n	80059ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005980:	667b      	str	r3, [r7, #100]	; 0x64
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800598c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005990:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e6      	bne.n	800596c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3308      	adds	r3, #8
 80059a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	663b      	str	r3, [r7, #96]	; 0x60
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3308      	adds	r3, #8
 80059bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059be:	64ba      	str	r2, [r7, #72]	; 0x48
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80059e6:	2303      	movs	r3, #3
 80059e8:	e067      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d04f      	beq.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a06:	d147      	bne.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e6      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	e853 3f00 	ldrex	r3, [r3]
 8005a52:	613b      	str	r3, [r7, #16]
   return(result);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f023 0301 	bic.w	r3, r3, #1
 8005a5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3308      	adds	r3, #8
 8005a62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a64:	623a      	str	r2, [r7, #32]
 8005a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	69f9      	ldr	r1, [r7, #28]
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	e841 2300 	strex	r3, r2, [r1]
 8005a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e5      	bne.n	8005a44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e010      	b.n	8005aba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	79fb      	ldrb	r3, [r7, #7]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	f43f af4a 	beq.w	800594c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3770      	adds	r7, #112	; 0x70
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <memset>:
 8005ac2:	4402      	add	r2, r0
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d100      	bne.n	8005acc <memset+0xa>
 8005aca:	4770      	bx	lr
 8005acc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad0:	e7f9      	b.n	8005ac6 <memset+0x4>
	...

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	; (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	; (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	; (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	; (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f001 f8ba 	bl	8006c60 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	08006ea0 	.word	0x08006ea0
 8005b10:	08006ea0 	.word	0x08006ea0
 8005b14:	08006ea0 	.word	0x08006ea0
 8005b18:	08006ea4 	.word	0x08006ea4
 8005b1c:	00000000 	.word	0x00000000

08005b20 <tan>:
 8005b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b22:	ec53 2b10 	vmov	r2, r3, d0
 8005b26:	4816      	ldr	r0, [pc, #88]	; (8005b80 <tan+0x60>)
 8005b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b2c:	4281      	cmp	r1, r0
 8005b2e:	dc07      	bgt.n	8005b40 <tan+0x20>
 8005b30:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005b78 <tan+0x58>
 8005b34:	2001      	movs	r0, #1
 8005b36:	b005      	add	sp, #20
 8005b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b3c:	f000 b824 	b.w	8005b88 <__kernel_tan>
 8005b40:	4810      	ldr	r0, [pc, #64]	; (8005b84 <tan+0x64>)
 8005b42:	4281      	cmp	r1, r0
 8005b44:	dd09      	ble.n	8005b5a <tan+0x3a>
 8005b46:	ee10 0a10 	vmov	r0, s0
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	f7fa fb40 	bl	80001d0 <__aeabi_dsub>
 8005b50:	ec41 0b10 	vmov	d0, r0, r1
 8005b54:	b005      	add	sp, #20
 8005b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b5a:	4668      	mov	r0, sp
 8005b5c:	f000 fa20 	bl	8005fa0 <__ieee754_rem_pio2>
 8005b60:	0040      	lsls	r0, r0, #1
 8005b62:	f000 0002 	and.w	r0, r0, #2
 8005b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b6a:	ed9d 0b00 	vldr	d0, [sp]
 8005b6e:	f1c0 0001 	rsb	r0, r0, #1
 8005b72:	f000 f809 	bl	8005b88 <__kernel_tan>
 8005b76:	e7ed      	b.n	8005b54 <tan+0x34>
	...
 8005b80:	3fe921fb 	.word	0x3fe921fb
 8005b84:	7fefffff 	.word	0x7fefffff

08005b88 <__kernel_tan>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	ed2d 8b06 	vpush	{d8-d10}
 8005b90:	ec5b ab10 	vmov	sl, fp, d0
 8005b94:	4be0      	ldr	r3, [pc, #896]	; (8005f18 <__kernel_tan+0x390>)
 8005b96:	b083      	sub	sp, #12
 8005b98:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005b9c:	429f      	cmp	r7, r3
 8005b9e:	ec59 8b11 	vmov	r8, r9, d1
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	f8cd b000 	str.w	fp, [sp]
 8005ba8:	dc61      	bgt.n	8005c6e <__kernel_tan+0xe6>
 8005baa:	ee10 0a10 	vmov	r0, s0
 8005bae:	4659      	mov	r1, fp
 8005bb0:	f7fa ff60 	bl	8000a74 <__aeabi_d2iz>
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	f040 8083 	bne.w	8005cc2 <__kernel_tan+0x13a>
 8005bbc:	1c73      	adds	r3, r6, #1
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	433b      	orrs	r3, r7
 8005bc4:	d112      	bne.n	8005bec <__kernel_tan+0x64>
 8005bc6:	ec4b ab10 	vmov	d0, sl, fp
 8005bca:	f000 fbef 	bl	80063ac <fabs>
 8005bce:	49d3      	ldr	r1, [pc, #844]	; (8005f1c <__kernel_tan+0x394>)
 8005bd0:	ec53 2b10 	vmov	r2, r3, d0
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fa fddd 	bl	8000794 <__aeabi_ddiv>
 8005bda:	4682      	mov	sl, r0
 8005bdc:	468b      	mov	fp, r1
 8005bde:	ec4b ab10 	vmov	d0, sl, fp
 8005be2:	b003      	add	sp, #12
 8005be4:	ecbd 8b06 	vpop	{d8-d10}
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	2e01      	cmp	r6, #1
 8005bee:	d0f6      	beq.n	8005bde <__kernel_tan+0x56>
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	4650      	mov	r0, sl
 8005bf6:	4659      	mov	r1, fp
 8005bf8:	f7fa faec 	bl	80001d4 <__adddf3>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	460f      	mov	r7, r1
 8005c02:	2000      	movs	r0, #0
 8005c04:	49c6      	ldr	r1, [pc, #792]	; (8005f20 <__kernel_tan+0x398>)
 8005c06:	f7fa fdc5 	bl	8000794 <__aeabi_ddiv>
 8005c0a:	e9cd 0100 	strd	r0, r1, [sp]
 8005c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c12:	462e      	mov	r6, r5
 8005c14:	4652      	mov	r2, sl
 8005c16:	462c      	mov	r4, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	465b      	mov	r3, fp
 8005c20:	f7fa fad6 	bl	80001d0 <__aeabi_dsub>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	f7fa fad0 	bl	80001d0 <__aeabi_dsub>
 8005c30:	4632      	mov	r2, r6
 8005c32:	462b      	mov	r3, r5
 8005c34:	f7fa fc84 	bl	8000540 <__aeabi_dmul>
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4680      	mov	r8, r0
 8005c3c:	4689      	mov	r9, r1
 8005c3e:	462b      	mov	r3, r5
 8005c40:	4630      	mov	r0, r6
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa fc7c 	bl	8000540 <__aeabi_dmul>
 8005c48:	4bb4      	ldr	r3, [pc, #720]	; (8005f1c <__kernel_tan+0x394>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f7fa fac2 	bl	80001d4 <__adddf3>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa fabc 	bl	80001d4 <__adddf3>
 8005c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c60:	f7fa fc6e 	bl	8000540 <__aeabi_dmul>
 8005c64:	4622      	mov	r2, r4
 8005c66:	462b      	mov	r3, r5
 8005c68:	f7fa fab4 	bl	80001d4 <__adddf3>
 8005c6c:	e7b5      	b.n	8005bda <__kernel_tan+0x52>
 8005c6e:	4bad      	ldr	r3, [pc, #692]	; (8005f24 <__kernel_tan+0x39c>)
 8005c70:	429f      	cmp	r7, r3
 8005c72:	dd26      	ble.n	8005cc2 <__kernel_tan+0x13a>
 8005c74:	9b00      	ldr	r3, [sp, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	da09      	bge.n	8005c8e <__kernel_tan+0x106>
 8005c7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005c7e:	469b      	mov	fp, r3
 8005c80:	ee10 aa10 	vmov	sl, s0
 8005c84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005c88:	ee11 8a10 	vmov	r8, s2
 8005c8c:	4699      	mov	r9, r3
 8005c8e:	4652      	mov	r2, sl
 8005c90:	465b      	mov	r3, fp
 8005c92:	a183      	add	r1, pc, #524	; (adr r1, 8005ea0 <__kernel_tan+0x318>)
 8005c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c98:	f7fa fa9a 	bl	80001d0 <__aeabi_dsub>
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	a180      	add	r1, pc, #512	; (adr r1, 8005ea8 <__kernel_tan+0x320>)
 8005ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005caa:	f7fa fa91 	bl	80001d0 <__aeabi_dsub>
 8005cae:	4622      	mov	r2, r4
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	f7fa fa8f 	bl	80001d4 <__adddf3>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	4682      	mov	sl, r0
 8005cbc:	468b      	mov	fp, r1
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	4652      	mov	r2, sl
 8005cc4:	465b      	mov	r3, fp
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	4659      	mov	r1, fp
 8005cca:	f7fa fc39 	bl	8000540 <__aeabi_dmul>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	ec43 2b18 	vmov	d8, r2, r3
 8005cd6:	f7fa fc33 	bl	8000540 <__aeabi_dmul>
 8005cda:	ec53 2b18 	vmov	r2, r3, d8
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	4650      	mov	r0, sl
 8005ce4:	4659      	mov	r1, fp
 8005ce6:	f7fa fc2b 	bl	8000540 <__aeabi_dmul>
 8005cea:	a371      	add	r3, pc, #452	; (adr r3, 8005eb0 <__kernel_tan+0x328>)
 8005cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf0:	ec41 0b19 	vmov	d9, r0, r1
 8005cf4:	4620      	mov	r0, r4
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fc22 	bl	8000540 <__aeabi_dmul>
 8005cfc:	a36e      	add	r3, pc, #440	; (adr r3, 8005eb8 <__kernel_tan+0x330>)
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f7fa fa67 	bl	80001d4 <__adddf3>
 8005d06:	4622      	mov	r2, r4
 8005d08:	462b      	mov	r3, r5
 8005d0a:	f7fa fc19 	bl	8000540 <__aeabi_dmul>
 8005d0e:	a36c      	add	r3, pc, #432	; (adr r3, 8005ec0 <__kernel_tan+0x338>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fa5e 	bl	80001d4 <__adddf3>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	462b      	mov	r3, r5
 8005d1c:	f7fa fc10 	bl	8000540 <__aeabi_dmul>
 8005d20:	a369      	add	r3, pc, #420	; (adr r3, 8005ec8 <__kernel_tan+0x340>)
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f7fa fa55 	bl	80001d4 <__adddf3>
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	f7fa fc07 	bl	8000540 <__aeabi_dmul>
 8005d32:	a367      	add	r3, pc, #412	; (adr r3, 8005ed0 <__kernel_tan+0x348>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fa4c 	bl	80001d4 <__adddf3>
 8005d3c:	4622      	mov	r2, r4
 8005d3e:	462b      	mov	r3, r5
 8005d40:	f7fa fbfe 	bl	8000540 <__aeabi_dmul>
 8005d44:	a364      	add	r3, pc, #400	; (adr r3, 8005ed8 <__kernel_tan+0x350>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fa43 	bl	80001d4 <__adddf3>
 8005d4e:	ec53 2b18 	vmov	r2, r3, d8
 8005d52:	f7fa fbf5 	bl	8000540 <__aeabi_dmul>
 8005d56:	a362      	add	r3, pc, #392	; (adr r3, 8005ee0 <__kernel_tan+0x358>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	ec41 0b1a 	vmov	d10, r0, r1
 8005d60:	4620      	mov	r0, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	f7fa fbec 	bl	8000540 <__aeabi_dmul>
 8005d68:	a35f      	add	r3, pc, #380	; (adr r3, 8005ee8 <__kernel_tan+0x360>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fa31 	bl	80001d4 <__adddf3>
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	f7fa fbe3 	bl	8000540 <__aeabi_dmul>
 8005d7a:	a35d      	add	r3, pc, #372	; (adr r3, 8005ef0 <__kernel_tan+0x368>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fa28 	bl	80001d4 <__adddf3>
 8005d84:	4622      	mov	r2, r4
 8005d86:	462b      	mov	r3, r5
 8005d88:	f7fa fbda 	bl	8000540 <__aeabi_dmul>
 8005d8c:	a35a      	add	r3, pc, #360	; (adr r3, 8005ef8 <__kernel_tan+0x370>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fa1f 	bl	80001d4 <__adddf3>
 8005d96:	4622      	mov	r2, r4
 8005d98:	462b      	mov	r3, r5
 8005d9a:	f7fa fbd1 	bl	8000540 <__aeabi_dmul>
 8005d9e:	a358      	add	r3, pc, #352	; (adr r3, 8005f00 <__kernel_tan+0x378>)
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f7fa fa16 	bl	80001d4 <__adddf3>
 8005da8:	4622      	mov	r2, r4
 8005daa:	462b      	mov	r3, r5
 8005dac:	f7fa fbc8 	bl	8000540 <__aeabi_dmul>
 8005db0:	a355      	add	r3, pc, #340	; (adr r3, 8005f08 <__kernel_tan+0x380>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fa0d 	bl	80001d4 <__adddf3>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	ec51 0b1a 	vmov	r0, r1, d10
 8005dc2:	f7fa fa07 	bl	80001d4 <__adddf3>
 8005dc6:	ec53 2b19 	vmov	r2, r3, d9
 8005dca:	f7fa fbb9 	bl	8000540 <__aeabi_dmul>
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	f7fa f9ff 	bl	80001d4 <__adddf3>
 8005dd6:	ec53 2b18 	vmov	r2, r3, d8
 8005dda:	f7fa fbb1 	bl	8000540 <__aeabi_dmul>
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	f7fa f9f7 	bl	80001d4 <__adddf3>
 8005de6:	a34a      	add	r3, pc, #296	; (adr r3, 8005f10 <__kernel_tan+0x388>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	ec51 0b19 	vmov	r0, r1, d9
 8005df4:	f7fa fba4 	bl	8000540 <__aeabi_dmul>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	f7fa f9ea 	bl	80001d4 <__adddf3>
 8005e00:	460b      	mov	r3, r1
 8005e02:	ec41 0b18 	vmov	d8, r0, r1
 8005e06:	4602      	mov	r2, r0
 8005e08:	4659      	mov	r1, fp
 8005e0a:	4650      	mov	r0, sl
 8005e0c:	f7fa f9e2 	bl	80001d4 <__adddf3>
 8005e10:	4b44      	ldr	r3, [pc, #272]	; (8005f24 <__kernel_tan+0x39c>)
 8005e12:	429f      	cmp	r7, r3
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	f340 8086 	ble.w	8005f28 <__kernel_tan+0x3a0>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7fa fb25 	bl	800046c <__aeabi_i2d>
 8005e22:	4622      	mov	r2, r4
 8005e24:	4680      	mov	r8, r0
 8005e26:	4689      	mov	r9, r1
 8005e28:	462b      	mov	r3, r5
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7fa fb87 	bl	8000540 <__aeabi_dmul>
 8005e32:	4642      	mov	r2, r8
 8005e34:	4606      	mov	r6, r0
 8005e36:	460f      	mov	r7, r1
 8005e38:	464b      	mov	r3, r9
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f7fa f9c9 	bl	80001d4 <__adddf3>
 8005e42:	4602      	mov	r2, r0
 8005e44:	460b      	mov	r3, r1
 8005e46:	4630      	mov	r0, r6
 8005e48:	4639      	mov	r1, r7
 8005e4a:	f7fa fca3 	bl	8000794 <__aeabi_ddiv>
 8005e4e:	ec53 2b18 	vmov	r2, r3, d8
 8005e52:	f7fa f9bd 	bl	80001d0 <__aeabi_dsub>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	f7fa f9b7 	bl	80001d0 <__aeabi_dsub>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	f7fa f9b5 	bl	80001d4 <__adddf3>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	f7fa f9ad 	bl	80001d0 <__aeabi_dsub>
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005e7c:	f00a 0a02 	and.w	sl, sl, #2
 8005e80:	4604      	mov	r4, r0
 8005e82:	f1ca 0001 	rsb	r0, sl, #1
 8005e86:	460d      	mov	r5, r1
 8005e88:	f7fa faf0 	bl	800046c <__aeabi_i2d>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa fb54 	bl	8000540 <__aeabi_dmul>
 8005e98:	e69f      	b.n	8005bda <__kernel_tan+0x52>
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w
 8005ea0:	54442d18 	.word	0x54442d18
 8005ea4:	3fe921fb 	.word	0x3fe921fb
 8005ea8:	33145c07 	.word	0x33145c07
 8005eac:	3c81a626 	.word	0x3c81a626
 8005eb0:	74bf7ad4 	.word	0x74bf7ad4
 8005eb4:	3efb2a70 	.word	0x3efb2a70
 8005eb8:	32f0a7e9 	.word	0x32f0a7e9
 8005ebc:	3f12b80f 	.word	0x3f12b80f
 8005ec0:	1a8d1068 	.word	0x1a8d1068
 8005ec4:	3f3026f7 	.word	0x3f3026f7
 8005ec8:	fee08315 	.word	0xfee08315
 8005ecc:	3f57dbc8 	.word	0x3f57dbc8
 8005ed0:	e96e8493 	.word	0xe96e8493
 8005ed4:	3f8226e3 	.word	0x3f8226e3
 8005ed8:	1bb341fe 	.word	0x1bb341fe
 8005edc:	3faba1ba 	.word	0x3faba1ba
 8005ee0:	db605373 	.word	0xdb605373
 8005ee4:	bef375cb 	.word	0xbef375cb
 8005ee8:	a03792a6 	.word	0xa03792a6
 8005eec:	3f147e88 	.word	0x3f147e88
 8005ef0:	f2f26501 	.word	0xf2f26501
 8005ef4:	3f4344d8 	.word	0x3f4344d8
 8005ef8:	c9560328 	.word	0xc9560328
 8005efc:	3f6d6d22 	.word	0x3f6d6d22
 8005f00:	8406d637 	.word	0x8406d637
 8005f04:	3f9664f4 	.word	0x3f9664f4
 8005f08:	1110fe7a 	.word	0x1110fe7a
 8005f0c:	3fc11111 	.word	0x3fc11111
 8005f10:	55555563 	.word	0x55555563
 8005f14:	3fd55555 	.word	0x3fd55555
 8005f18:	3e2fffff 	.word	0x3e2fffff
 8005f1c:	3ff00000 	.word	0x3ff00000
 8005f20:	bff00000 	.word	0xbff00000
 8005f24:	3fe59427 	.word	0x3fe59427
 8005f28:	2e01      	cmp	r6, #1
 8005f2a:	d02f      	beq.n	8005f8c <__kernel_tan+0x404>
 8005f2c:	460f      	mov	r7, r1
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4689      	mov	r9, r1
 8005f34:	2000      	movs	r0, #0
 8005f36:	4917      	ldr	r1, [pc, #92]	; (8005f94 <__kernel_tan+0x40c>)
 8005f38:	f7fa fc2c 	bl	8000794 <__aeabi_ddiv>
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8005f42:	4652      	mov	r2, sl
 8005f44:	465b      	mov	r3, fp
 8005f46:	4630      	mov	r0, r6
 8005f48:	4639      	mov	r1, r7
 8005f4a:	f7fa f941 	bl	80001d0 <__aeabi_dsub>
 8005f4e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	ec51 0b18 	vmov	r0, r1, d8
 8005f5a:	f7fa f939 	bl	80001d0 <__aeabi_dsub>
 8005f5e:	4632      	mov	r2, r6
 8005f60:	462b      	mov	r3, r5
 8005f62:	f7fa faed 	bl	8000540 <__aeabi_dmul>
 8005f66:	46b0      	mov	r8, r6
 8005f68:	460f      	mov	r7, r1
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	4634      	mov	r4, r6
 8005f70:	4649      	mov	r1, r9
 8005f72:	4606      	mov	r6, r0
 8005f74:	4640      	mov	r0, r8
 8005f76:	f7fa fae3 	bl	8000540 <__aeabi_dmul>
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <__kernel_tan+0x410>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f7fa f929 	bl	80001d4 <__adddf3>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4630      	mov	r0, r6
 8005f88:	4639      	mov	r1, r7
 8005f8a:	e665      	b.n	8005c58 <__kernel_tan+0xd0>
 8005f8c:	4682      	mov	sl, r0
 8005f8e:	468b      	mov	fp, r1
 8005f90:	e625      	b.n	8005bde <__kernel_tan+0x56>
 8005f92:	bf00      	nop
 8005f94:	bff00000 	.word	0xbff00000
 8005f98:	3ff00000 	.word	0x3ff00000
 8005f9c:	00000000 	.word	0x00000000

08005fa0 <__ieee754_rem_pio2>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	ed2d 8b02 	vpush	{d8}
 8005fa8:	ec55 4b10 	vmov	r4, r5, d0
 8005fac:	4bca      	ldr	r3, [pc, #808]	; (80062d8 <__ieee754_rem_pio2+0x338>)
 8005fae:	b08b      	sub	sp, #44	; 0x2c
 8005fb0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005fb4:	4598      	cmp	r8, r3
 8005fb6:	4682      	mov	sl, r0
 8005fb8:	9502      	str	r5, [sp, #8]
 8005fba:	dc08      	bgt.n	8005fce <__ieee754_rem_pio2+0x2e>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	ed80 0b00 	vstr	d0, [r0]
 8005fc4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005fc8:	f04f 0b00 	mov.w	fp, #0
 8005fcc:	e028      	b.n	8006020 <__ieee754_rem_pio2+0x80>
 8005fce:	4bc3      	ldr	r3, [pc, #780]	; (80062dc <__ieee754_rem_pio2+0x33c>)
 8005fd0:	4598      	cmp	r8, r3
 8005fd2:	dc78      	bgt.n	80060c6 <__ieee754_rem_pio2+0x126>
 8005fd4:	9b02      	ldr	r3, [sp, #8]
 8005fd6:	4ec2      	ldr	r6, [pc, #776]	; (80062e0 <__ieee754_rem_pio2+0x340>)
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	ee10 0a10 	vmov	r0, s0
 8005fde:	a3b0      	add	r3, pc, #704	; (adr r3, 80062a0 <__ieee754_rem_pio2+0x300>)
 8005fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	dd39      	ble.n	800605c <__ieee754_rem_pio2+0xbc>
 8005fe8:	f7fa f8f2 	bl	80001d0 <__aeabi_dsub>
 8005fec:	45b0      	cmp	r8, r6
 8005fee:	4604      	mov	r4, r0
 8005ff0:	460d      	mov	r5, r1
 8005ff2:	d01b      	beq.n	800602c <__ieee754_rem_pio2+0x8c>
 8005ff4:	a3ac      	add	r3, pc, #688	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x308>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f8e9 	bl	80001d0 <__aeabi_dsub>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	e9ca 2300 	strd	r2, r3, [sl]
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa f8e1 	bl	80001d0 <__aeabi_dsub>
 800600e:	a3a6      	add	r3, pc, #664	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x308>)
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f7fa f8dc 	bl	80001d0 <__aeabi_dsub>
 8006018:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800601c:	f04f 0b01 	mov.w	fp, #1
 8006020:	4658      	mov	r0, fp
 8006022:	b00b      	add	sp, #44	; 0x2c
 8006024:	ecbd 8b02 	vpop	{d8}
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	a3a0      	add	r3, pc, #640	; (adr r3, 80062b0 <__ieee754_rem_pio2+0x310>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa f8cd 	bl	80001d0 <__aeabi_dsub>
 8006036:	a3a0      	add	r3, pc, #640	; (adr r3, 80062b8 <__ieee754_rem_pio2+0x318>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	f7fa f8c6 	bl	80001d0 <__aeabi_dsub>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	e9ca 2300 	strd	r2, r3, [sl]
 800604c:	4620      	mov	r0, r4
 800604e:	4629      	mov	r1, r5
 8006050:	f7fa f8be 	bl	80001d0 <__aeabi_dsub>
 8006054:	a398      	add	r3, pc, #608	; (adr r3, 80062b8 <__ieee754_rem_pio2+0x318>)
 8006056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605a:	e7db      	b.n	8006014 <__ieee754_rem_pio2+0x74>
 800605c:	f7fa f8ba 	bl	80001d4 <__adddf3>
 8006060:	45b0      	cmp	r8, r6
 8006062:	4604      	mov	r4, r0
 8006064:	460d      	mov	r5, r1
 8006066:	d016      	beq.n	8006096 <__ieee754_rem_pio2+0xf6>
 8006068:	a38f      	add	r3, pc, #572	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x308>)
 800606a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606e:	f7fa f8b1 	bl	80001d4 <__adddf3>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	e9ca 2300 	strd	r2, r3, [sl]
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa f8a7 	bl	80001d0 <__aeabi_dsub>
 8006082:	a389      	add	r3, pc, #548	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x308>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	f7fa f8a4 	bl	80001d4 <__adddf3>
 800608c:	f04f 3bff 	mov.w	fp, #4294967295
 8006090:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006094:	e7c4      	b.n	8006020 <__ieee754_rem_pio2+0x80>
 8006096:	a386      	add	r3, pc, #536	; (adr r3, 80062b0 <__ieee754_rem_pio2+0x310>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa f89a 	bl	80001d4 <__adddf3>
 80060a0:	a385      	add	r3, pc, #532	; (adr r3, 80062b8 <__ieee754_rem_pio2+0x318>)
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	f7fa f893 	bl	80001d4 <__adddf3>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	e9ca 2300 	strd	r2, r3, [sl]
 80060b6:	4620      	mov	r0, r4
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7fa f889 	bl	80001d0 <__aeabi_dsub>
 80060be:	a37e      	add	r3, pc, #504	; (adr r3, 80062b8 <__ieee754_rem_pio2+0x318>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	e7e0      	b.n	8006088 <__ieee754_rem_pio2+0xe8>
 80060c6:	4b87      	ldr	r3, [pc, #540]	; (80062e4 <__ieee754_rem_pio2+0x344>)
 80060c8:	4598      	cmp	r8, r3
 80060ca:	f300 80d8 	bgt.w	800627e <__ieee754_rem_pio2+0x2de>
 80060ce:	f000 f96d 	bl	80063ac <fabs>
 80060d2:	ec55 4b10 	vmov	r4, r5, d0
 80060d6:	ee10 0a10 	vmov	r0, s0
 80060da:	a379      	add	r3, pc, #484	; (adr r3, 80062c0 <__ieee754_rem_pio2+0x320>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fa2d 	bl	8000540 <__aeabi_dmul>
 80060e6:	4b80      	ldr	r3, [pc, #512]	; (80062e8 <__ieee754_rem_pio2+0x348>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	f7fa f873 	bl	80001d4 <__adddf3>
 80060ee:	f7fa fcc1 	bl	8000a74 <__aeabi_d2iz>
 80060f2:	4683      	mov	fp, r0
 80060f4:	f7fa f9ba 	bl	800046c <__aeabi_i2d>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	ec43 2b18 	vmov	d8, r2, r3
 8006100:	a367      	add	r3, pc, #412	; (adr r3, 80062a0 <__ieee754_rem_pio2+0x300>)
 8006102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006106:	f7fa fa1b 	bl	8000540 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f85d 	bl	80001d0 <__aeabi_dsub>
 8006116:	a364      	add	r3, pc, #400	; (adr r3, 80062a8 <__ieee754_rem_pio2+0x308>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	ec51 0b18 	vmov	r0, r1, d8
 8006124:	f7fa fa0c 	bl	8000540 <__aeabi_dmul>
 8006128:	f1bb 0f1f 	cmp.w	fp, #31
 800612c:	4604      	mov	r4, r0
 800612e:	460d      	mov	r5, r1
 8006130:	dc0d      	bgt.n	800614e <__ieee754_rem_pio2+0x1ae>
 8006132:	4b6e      	ldr	r3, [pc, #440]	; (80062ec <__ieee754_rem_pio2+0x34c>)
 8006134:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	4543      	cmp	r3, r8
 800613e:	d006      	beq.n	800614e <__ieee754_rem_pio2+0x1ae>
 8006140:	4622      	mov	r2, r4
 8006142:	462b      	mov	r3, r5
 8006144:	4630      	mov	r0, r6
 8006146:	4639      	mov	r1, r7
 8006148:	f7fa f842 	bl	80001d0 <__aeabi_dsub>
 800614c:	e00e      	b.n	800616c <__ieee754_rem_pio2+0x1cc>
 800614e:	462b      	mov	r3, r5
 8006150:	4622      	mov	r2, r4
 8006152:	4630      	mov	r0, r6
 8006154:	4639      	mov	r1, r7
 8006156:	f7fa f83b 	bl	80001d0 <__aeabi_dsub>
 800615a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006164:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006168:	2b10      	cmp	r3, #16
 800616a:	dc02      	bgt.n	8006172 <__ieee754_rem_pio2+0x1d2>
 800616c:	e9ca 0100 	strd	r0, r1, [sl]
 8006170:	e039      	b.n	80061e6 <__ieee754_rem_pio2+0x246>
 8006172:	a34f      	add	r3, pc, #316	; (adr r3, 80062b0 <__ieee754_rem_pio2+0x310>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	ec51 0b18 	vmov	r0, r1, d8
 800617c:	f7fa f9e0 	bl	8000540 <__aeabi_dmul>
 8006180:	4604      	mov	r4, r0
 8006182:	460d      	mov	r5, r1
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4630      	mov	r0, r6
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa f820 	bl	80001d0 <__aeabi_dsub>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4680      	mov	r8, r0
 8006196:	4689      	mov	r9, r1
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa f818 	bl	80001d0 <__aeabi_dsub>
 80061a0:	4622      	mov	r2, r4
 80061a2:	462b      	mov	r3, r5
 80061a4:	f7fa f814 	bl	80001d0 <__aeabi_dsub>
 80061a8:	a343      	add	r3, pc, #268	; (adr r3, 80062b8 <__ieee754_rem_pio2+0x318>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	4604      	mov	r4, r0
 80061b0:	460d      	mov	r5, r1
 80061b2:	ec51 0b18 	vmov	r0, r1, d8
 80061b6:	f7fa f9c3 	bl	8000540 <__aeabi_dmul>
 80061ba:	4622      	mov	r2, r4
 80061bc:	462b      	mov	r3, r5
 80061be:	f7fa f807 	bl	80001d0 <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4604      	mov	r4, r0
 80061c8:	460d      	mov	r5, r1
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	f7f9 ffff 	bl	80001d0 <__aeabi_dsub>
 80061d2:	9a03      	ldr	r2, [sp, #12]
 80061d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b31      	cmp	r3, #49	; 0x31
 80061dc:	dc24      	bgt.n	8006228 <__ieee754_rem_pio2+0x288>
 80061de:	e9ca 0100 	strd	r0, r1, [sl]
 80061e2:	4646      	mov	r6, r8
 80061e4:	464f      	mov	r7, r9
 80061e6:	e9da 8900 	ldrd	r8, r9, [sl]
 80061ea:	4630      	mov	r0, r6
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7f9 ffed 	bl	80001d0 <__aeabi_dsub>
 80061f6:	462b      	mov	r3, r5
 80061f8:	4622      	mov	r2, r4
 80061fa:	f7f9 ffe9 	bl	80001d0 <__aeabi_dsub>
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006206:	f6bf af0b 	bge.w	8006020 <__ieee754_rem_pio2+0x80>
 800620a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800620e:	f8ca 3004 	str.w	r3, [sl, #4]
 8006212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006216:	f8ca 8000 	str.w	r8, [sl]
 800621a:	f8ca 0008 	str.w	r0, [sl, #8]
 800621e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006222:	f1cb 0b00 	rsb	fp, fp, #0
 8006226:	e6fb      	b.n	8006020 <__ieee754_rem_pio2+0x80>
 8006228:	a327      	add	r3, pc, #156	; (adr r3, 80062c8 <__ieee754_rem_pio2+0x328>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	ec51 0b18 	vmov	r0, r1, d8
 8006232:	f7fa f985 	bl	8000540 <__aeabi_dmul>
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4640      	mov	r0, r8
 8006240:	4649      	mov	r1, r9
 8006242:	f7f9 ffc5 	bl	80001d0 <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4606      	mov	r6, r0
 800624c:	460f      	mov	r7, r1
 800624e:	4640      	mov	r0, r8
 8006250:	4649      	mov	r1, r9
 8006252:	f7f9 ffbd 	bl	80001d0 <__aeabi_dsub>
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	f7f9 ffb9 	bl	80001d0 <__aeabi_dsub>
 800625e:	a31c      	add	r3, pc, #112	; (adr r3, 80062d0 <__ieee754_rem_pio2+0x330>)
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	4604      	mov	r4, r0
 8006266:	460d      	mov	r5, r1
 8006268:	ec51 0b18 	vmov	r0, r1, d8
 800626c:	f7fa f968 	bl	8000540 <__aeabi_dmul>
 8006270:	4622      	mov	r2, r4
 8006272:	462b      	mov	r3, r5
 8006274:	f7f9 ffac 	bl	80001d0 <__aeabi_dsub>
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	e760      	b.n	8006140 <__ieee754_rem_pio2+0x1a0>
 800627e:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <__ieee754_rem_pio2+0x350>)
 8006280:	4598      	cmp	r8, r3
 8006282:	dd37      	ble.n	80062f4 <__ieee754_rem_pio2+0x354>
 8006284:	ee10 2a10 	vmov	r2, s0
 8006288:	462b      	mov	r3, r5
 800628a:	4620      	mov	r0, r4
 800628c:	4629      	mov	r1, r5
 800628e:	f7f9 ff9f 	bl	80001d0 <__aeabi_dsub>
 8006292:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006296:	e9ca 0100 	strd	r0, r1, [sl]
 800629a:	e695      	b.n	8005fc8 <__ieee754_rem_pio2+0x28>
 800629c:	f3af 8000 	nop.w
 80062a0:	54400000 	.word	0x54400000
 80062a4:	3ff921fb 	.word	0x3ff921fb
 80062a8:	1a626331 	.word	0x1a626331
 80062ac:	3dd0b461 	.word	0x3dd0b461
 80062b0:	1a600000 	.word	0x1a600000
 80062b4:	3dd0b461 	.word	0x3dd0b461
 80062b8:	2e037073 	.word	0x2e037073
 80062bc:	3ba3198a 	.word	0x3ba3198a
 80062c0:	6dc9c883 	.word	0x6dc9c883
 80062c4:	3fe45f30 	.word	0x3fe45f30
 80062c8:	2e000000 	.word	0x2e000000
 80062cc:	3ba3198a 	.word	0x3ba3198a
 80062d0:	252049c1 	.word	0x252049c1
 80062d4:	397b839a 	.word	0x397b839a
 80062d8:	3fe921fb 	.word	0x3fe921fb
 80062dc:	4002d97b 	.word	0x4002d97b
 80062e0:	3ff921fb 	.word	0x3ff921fb
 80062e4:	413921fb 	.word	0x413921fb
 80062e8:	3fe00000 	.word	0x3fe00000
 80062ec:	08006cc0 	.word	0x08006cc0
 80062f0:	7fefffff 	.word	0x7fefffff
 80062f4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80062f8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80062fc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006300:	4620      	mov	r0, r4
 8006302:	460d      	mov	r5, r1
 8006304:	f7fa fbb6 	bl	8000a74 <__aeabi_d2iz>
 8006308:	f7fa f8b0 	bl	800046c <__aeabi_i2d>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4620      	mov	r0, r4
 8006312:	4629      	mov	r1, r5
 8006314:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006318:	f7f9 ff5a 	bl	80001d0 <__aeabi_dsub>
 800631c:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <__ieee754_rem_pio2+0x404>)
 800631e:	2200      	movs	r2, #0
 8006320:	f7fa f90e 	bl	8000540 <__aeabi_dmul>
 8006324:	460d      	mov	r5, r1
 8006326:	4604      	mov	r4, r0
 8006328:	f7fa fba4 	bl	8000a74 <__aeabi_d2iz>
 800632c:	f7fa f89e 	bl	800046c <__aeabi_i2d>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800633c:	f7f9 ff48 	bl	80001d0 <__aeabi_dsub>
 8006340:	4b18      	ldr	r3, [pc, #96]	; (80063a4 <__ieee754_rem_pio2+0x404>)
 8006342:	2200      	movs	r2, #0
 8006344:	f7fa f8fc 	bl	8000540 <__aeabi_dmul>
 8006348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800634c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006350:	2703      	movs	r7, #3
 8006352:	2400      	movs	r4, #0
 8006354:	2500      	movs	r5, #0
 8006356:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800635a:	4622      	mov	r2, r4
 800635c:	462b      	mov	r3, r5
 800635e:	46b9      	mov	r9, r7
 8006360:	3f01      	subs	r7, #1
 8006362:	f7fa fb55 	bl	8000a10 <__aeabi_dcmpeq>
 8006366:	2800      	cmp	r0, #0
 8006368:	d1f5      	bne.n	8006356 <__ieee754_rem_pio2+0x3b6>
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <__ieee754_rem_pio2+0x408>)
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	2302      	movs	r3, #2
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4632      	mov	r2, r6
 8006374:	464b      	mov	r3, r9
 8006376:	4651      	mov	r1, sl
 8006378:	a804      	add	r0, sp, #16
 800637a:	f000 f821 	bl	80063c0 <__kernel_rem_pio2>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	4683      	mov	fp, r0
 8006384:	f6bf ae4c 	bge.w	8006020 <__ieee754_rem_pio2+0x80>
 8006388:	e9da 2100 	ldrd	r2, r1, [sl]
 800638c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006390:	e9ca 2300 	strd	r2, r3, [sl]
 8006394:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800639c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80063a0:	e73f      	b.n	8006222 <__ieee754_rem_pio2+0x282>
 80063a2:	bf00      	nop
 80063a4:	41700000 	.word	0x41700000
 80063a8:	08006d40 	.word	0x08006d40

080063ac <fabs>:
 80063ac:	ec51 0b10 	vmov	r0, r1, d0
 80063b0:	ee10 2a10 	vmov	r2, s0
 80063b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063b8:	ec43 2b10 	vmov	d0, r2, r3
 80063bc:	4770      	bx	lr
	...

080063c0 <__kernel_rem_pio2>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ed2d 8b02 	vpush	{d8}
 80063c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80063cc:	f112 0f14 	cmn.w	r2, #20
 80063d0:	9306      	str	r3, [sp, #24]
 80063d2:	9104      	str	r1, [sp, #16]
 80063d4:	4bc2      	ldr	r3, [pc, #776]	; (80066e0 <__kernel_rem_pio2+0x320>)
 80063d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80063d8:	9009      	str	r0, [sp, #36]	; 0x24
 80063da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	9b06      	ldr	r3, [sp, #24]
 80063e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063e6:	bfa8      	it	ge
 80063e8:	1ed4      	subge	r4, r2, #3
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	bfb2      	itee	lt
 80063ee:	2400      	movlt	r4, #0
 80063f0:	2318      	movge	r3, #24
 80063f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80063f6:	f06f 0317 	mvn.w	r3, #23
 80063fa:	fb04 3303 	mla	r3, r4, r3, r3
 80063fe:	eb03 0a02 	add.w	sl, r3, r2
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	9a05      	ldr	r2, [sp, #20]
 8006406:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80066d0 <__kernel_rem_pio2+0x310>
 800640a:	eb03 0802 	add.w	r8, r3, r2
 800640e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006410:	1aa7      	subs	r7, r4, r2
 8006412:	ae20      	add	r6, sp, #128	; 0x80
 8006414:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006418:	2500      	movs	r5, #0
 800641a:	4545      	cmp	r5, r8
 800641c:	dd13      	ble.n	8006446 <__kernel_rem_pio2+0x86>
 800641e:	9b06      	ldr	r3, [sp, #24]
 8006420:	aa20      	add	r2, sp, #128	; 0x80
 8006422:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006426:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800642a:	f04f 0800 	mov.w	r8, #0
 800642e:	9b00      	ldr	r3, [sp, #0]
 8006430:	4598      	cmp	r8, r3
 8006432:	dc31      	bgt.n	8006498 <__kernel_rem_pio2+0xd8>
 8006434:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80066d0 <__kernel_rem_pio2+0x310>
 8006438:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800643c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006440:	462f      	mov	r7, r5
 8006442:	2600      	movs	r6, #0
 8006444:	e01b      	b.n	800647e <__kernel_rem_pio2+0xbe>
 8006446:	42ef      	cmn	r7, r5
 8006448:	d407      	bmi.n	800645a <__kernel_rem_pio2+0x9a>
 800644a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800644e:	f7fa f80d 	bl	800046c <__aeabi_i2d>
 8006452:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006456:	3501      	adds	r5, #1
 8006458:	e7df      	b.n	800641a <__kernel_rem_pio2+0x5a>
 800645a:	ec51 0b18 	vmov	r0, r1, d8
 800645e:	e7f8      	b.n	8006452 <__kernel_rem_pio2+0x92>
 8006460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006464:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006468:	f7fa f86a 	bl	8000540 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006474:	f7f9 feae 	bl	80001d4 <__adddf3>
 8006478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800647c:	3601      	adds	r6, #1
 800647e:	9b05      	ldr	r3, [sp, #20]
 8006480:	429e      	cmp	r6, r3
 8006482:	f1a7 0708 	sub.w	r7, r7, #8
 8006486:	ddeb      	ble.n	8006460 <__kernel_rem_pio2+0xa0>
 8006488:	ed9d 7b02 	vldr	d7, [sp, #8]
 800648c:	f108 0801 	add.w	r8, r8, #1
 8006490:	ecab 7b02 	vstmia	fp!, {d7}
 8006494:	3508      	adds	r5, #8
 8006496:	e7ca      	b.n	800642e <__kernel_rem_pio2+0x6e>
 8006498:	9b00      	ldr	r3, [sp, #0]
 800649a:	aa0c      	add	r2, sp, #48	; 0x30
 800649c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80064a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80064a8:	9c00      	ldr	r4, [sp, #0]
 80064aa:	930a      	str	r3, [sp, #40]	; 0x28
 80064ac:	00e3      	lsls	r3, r4, #3
 80064ae:	9308      	str	r3, [sp, #32]
 80064b0:	ab98      	add	r3, sp, #608	; 0x260
 80064b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80064ba:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80064be:	ab70      	add	r3, sp, #448	; 0x1c0
 80064c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80064c4:	46c3      	mov	fp, r8
 80064c6:	46a1      	mov	r9, r4
 80064c8:	f1b9 0f00 	cmp.w	r9, #0
 80064cc:	f1a5 0508 	sub.w	r5, r5, #8
 80064d0:	dc77      	bgt.n	80065c2 <__kernel_rem_pio2+0x202>
 80064d2:	ec47 6b10 	vmov	d0, r6, r7
 80064d6:	4650      	mov	r0, sl
 80064d8:	f000 fac2 	bl	8006a60 <scalbn>
 80064dc:	ec57 6b10 	vmov	r6, r7, d0
 80064e0:	2200      	movs	r2, #0
 80064e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80064e6:	ee10 0a10 	vmov	r0, s0
 80064ea:	4639      	mov	r1, r7
 80064ec:	f7fa f828 	bl	8000540 <__aeabi_dmul>
 80064f0:	ec41 0b10 	vmov	d0, r0, r1
 80064f4:	f000 fb34 	bl	8006b60 <floor>
 80064f8:	4b7a      	ldr	r3, [pc, #488]	; (80066e4 <__kernel_rem_pio2+0x324>)
 80064fa:	ec51 0b10 	vmov	r0, r1, d0
 80064fe:	2200      	movs	r2, #0
 8006500:	f7fa f81e 	bl	8000540 <__aeabi_dmul>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	4639      	mov	r1, r7
 800650c:	f7f9 fe60 	bl	80001d0 <__aeabi_dsub>
 8006510:	460f      	mov	r7, r1
 8006512:	4606      	mov	r6, r0
 8006514:	f7fa faae 	bl	8000a74 <__aeabi_d2iz>
 8006518:	9002      	str	r0, [sp, #8]
 800651a:	f7f9 ffa7 	bl	800046c <__aeabi_i2d>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4630      	mov	r0, r6
 8006524:	4639      	mov	r1, r7
 8006526:	f7f9 fe53 	bl	80001d0 <__aeabi_dsub>
 800652a:	f1ba 0f00 	cmp.w	sl, #0
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	dd6d      	ble.n	8006610 <__kernel_rem_pio2+0x250>
 8006534:	1e61      	subs	r1, r4, #1
 8006536:	ab0c      	add	r3, sp, #48	; 0x30
 8006538:	9d02      	ldr	r5, [sp, #8]
 800653a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800653e:	f1ca 0018 	rsb	r0, sl, #24
 8006542:	fa43 f200 	asr.w	r2, r3, r0
 8006546:	4415      	add	r5, r2
 8006548:	4082      	lsls	r2, r0
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	aa0c      	add	r2, sp, #48	; 0x30
 800654e:	9502      	str	r5, [sp, #8]
 8006550:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006554:	f1ca 0217 	rsb	r2, sl, #23
 8006558:	fa43 fb02 	asr.w	fp, r3, r2
 800655c:	f1bb 0f00 	cmp.w	fp, #0
 8006560:	dd65      	ble.n	800662e <__kernel_rem_pio2+0x26e>
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	3301      	adds	r3, #1
 8006568:	9302      	str	r3, [sp, #8]
 800656a:	4615      	mov	r5, r2
 800656c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006570:	4294      	cmp	r4, r2
 8006572:	f300 809f 	bgt.w	80066b4 <__kernel_rem_pio2+0x2f4>
 8006576:	f1ba 0f00 	cmp.w	sl, #0
 800657a:	dd07      	ble.n	800658c <__kernel_rem_pio2+0x1cc>
 800657c:	f1ba 0f01 	cmp.w	sl, #1
 8006580:	f000 80c1 	beq.w	8006706 <__kernel_rem_pio2+0x346>
 8006584:	f1ba 0f02 	cmp.w	sl, #2
 8006588:	f000 80c7 	beq.w	800671a <__kernel_rem_pio2+0x35a>
 800658c:	f1bb 0f02 	cmp.w	fp, #2
 8006590:	d14d      	bne.n	800662e <__kernel_rem_pio2+0x26e>
 8006592:	4632      	mov	r2, r6
 8006594:	463b      	mov	r3, r7
 8006596:	4954      	ldr	r1, [pc, #336]	; (80066e8 <__kernel_rem_pio2+0x328>)
 8006598:	2000      	movs	r0, #0
 800659a:	f7f9 fe19 	bl	80001d0 <__aeabi_dsub>
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	d043      	beq.n	800662e <__kernel_rem_pio2+0x26e>
 80065a6:	4650      	mov	r0, sl
 80065a8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80066d8 <__kernel_rem_pio2+0x318>
 80065ac:	f000 fa58 	bl	8006a60 <scalbn>
 80065b0:	4630      	mov	r0, r6
 80065b2:	4639      	mov	r1, r7
 80065b4:	ec53 2b10 	vmov	r2, r3, d0
 80065b8:	f7f9 fe0a 	bl	80001d0 <__aeabi_dsub>
 80065bc:	4606      	mov	r6, r0
 80065be:	460f      	mov	r7, r1
 80065c0:	e035      	b.n	800662e <__kernel_rem_pio2+0x26e>
 80065c2:	4b4a      	ldr	r3, [pc, #296]	; (80066ec <__kernel_rem_pio2+0x32c>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	4630      	mov	r0, r6
 80065c8:	4639      	mov	r1, r7
 80065ca:	f7f9 ffb9 	bl	8000540 <__aeabi_dmul>
 80065ce:	f7fa fa51 	bl	8000a74 <__aeabi_d2iz>
 80065d2:	f7f9 ff4b 	bl	800046c <__aeabi_i2d>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	ec43 2b18 	vmov	d8, r2, r3
 80065de:	4b44      	ldr	r3, [pc, #272]	; (80066f0 <__kernel_rem_pio2+0x330>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	f7f9 ffad 	bl	8000540 <__aeabi_dmul>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4630      	mov	r0, r6
 80065ec:	4639      	mov	r1, r7
 80065ee:	f7f9 fdef 	bl	80001d0 <__aeabi_dsub>
 80065f2:	f7fa fa3f 	bl	8000a74 <__aeabi_d2iz>
 80065f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065fa:	f84b 0b04 	str.w	r0, [fp], #4
 80065fe:	ec51 0b18 	vmov	r0, r1, d8
 8006602:	f7f9 fde7 	bl	80001d4 <__adddf3>
 8006606:	f109 39ff 	add.w	r9, r9, #4294967295
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
 800660e:	e75b      	b.n	80064c8 <__kernel_rem_pio2+0x108>
 8006610:	d106      	bne.n	8006620 <__kernel_rem_pio2+0x260>
 8006612:	1e63      	subs	r3, r4, #1
 8006614:	aa0c      	add	r2, sp, #48	; 0x30
 8006616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800661a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800661e:	e79d      	b.n	800655c <__kernel_rem_pio2+0x19c>
 8006620:	4b34      	ldr	r3, [pc, #208]	; (80066f4 <__kernel_rem_pio2+0x334>)
 8006622:	2200      	movs	r2, #0
 8006624:	f7fa fa12 	bl	8000a4c <__aeabi_dcmpge>
 8006628:	2800      	cmp	r0, #0
 800662a:	d140      	bne.n	80066ae <__kernel_rem_pio2+0x2ee>
 800662c:	4683      	mov	fp, r0
 800662e:	2200      	movs	r2, #0
 8006630:	2300      	movs	r3, #0
 8006632:	4630      	mov	r0, r6
 8006634:	4639      	mov	r1, r7
 8006636:	f7fa f9eb 	bl	8000a10 <__aeabi_dcmpeq>
 800663a:	2800      	cmp	r0, #0
 800663c:	f000 80c1 	beq.w	80067c2 <__kernel_rem_pio2+0x402>
 8006640:	1e65      	subs	r5, r4, #1
 8006642:	462b      	mov	r3, r5
 8006644:	2200      	movs	r2, #0
 8006646:	9900      	ldr	r1, [sp, #0]
 8006648:	428b      	cmp	r3, r1
 800664a:	da6d      	bge.n	8006728 <__kernel_rem_pio2+0x368>
 800664c:	2a00      	cmp	r2, #0
 800664e:	f000 808a 	beq.w	8006766 <__kernel_rem_pio2+0x3a6>
 8006652:	ab0c      	add	r3, sp, #48	; 0x30
 8006654:	f1aa 0a18 	sub.w	sl, sl, #24
 8006658:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80ae 	beq.w	80067be <__kernel_rem_pio2+0x3fe>
 8006662:	4650      	mov	r0, sl
 8006664:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80066d8 <__kernel_rem_pio2+0x318>
 8006668:	f000 f9fa 	bl	8006a60 <scalbn>
 800666c:	1c6b      	adds	r3, r5, #1
 800666e:	00da      	lsls	r2, r3, #3
 8006670:	9205      	str	r2, [sp, #20]
 8006672:	ec57 6b10 	vmov	r6, r7, d0
 8006676:	aa70      	add	r2, sp, #448	; 0x1c0
 8006678:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80066ec <__kernel_rem_pio2+0x32c>
 800667c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006680:	462c      	mov	r4, r5
 8006682:	f04f 0800 	mov.w	r8, #0
 8006686:	2c00      	cmp	r4, #0
 8006688:	f280 80d4 	bge.w	8006834 <__kernel_rem_pio2+0x474>
 800668c:	462c      	mov	r4, r5
 800668e:	2c00      	cmp	r4, #0
 8006690:	f2c0 8102 	blt.w	8006898 <__kernel_rem_pio2+0x4d8>
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <__kernel_rem_pio2+0x338>)
 8006696:	461e      	mov	r6, r3
 8006698:	ab70      	add	r3, sp, #448	; 0x1c0
 800669a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800669e:	1b2b      	subs	r3, r5, r4
 80066a0:	f04f 0900 	mov.w	r9, #0
 80066a4:	f04f 0a00 	mov.w	sl, #0
 80066a8:	2700      	movs	r7, #0
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	e0e6      	b.n	800687c <__kernel_rem_pio2+0x4bc>
 80066ae:	f04f 0b02 	mov.w	fp, #2
 80066b2:	e756      	b.n	8006562 <__kernel_rem_pio2+0x1a2>
 80066b4:	f8d8 3000 	ldr.w	r3, [r8]
 80066b8:	bb05      	cbnz	r5, 80066fc <__kernel_rem_pio2+0x33c>
 80066ba:	b123      	cbz	r3, 80066c6 <__kernel_rem_pio2+0x306>
 80066bc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80066c0:	f8c8 3000 	str.w	r3, [r8]
 80066c4:	2301      	movs	r3, #1
 80066c6:	3201      	adds	r2, #1
 80066c8:	f108 0804 	add.w	r8, r8, #4
 80066cc:	461d      	mov	r5, r3
 80066ce:	e74f      	b.n	8006570 <__kernel_rem_pio2+0x1b0>
	...
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	08006e88 	.word	0x08006e88
 80066e4:	40200000 	.word	0x40200000
 80066e8:	3ff00000 	.word	0x3ff00000
 80066ec:	3e700000 	.word	0x3e700000
 80066f0:	41700000 	.word	0x41700000
 80066f4:	3fe00000 	.word	0x3fe00000
 80066f8:	08006e48 	.word	0x08006e48
 80066fc:	1acb      	subs	r3, r1, r3
 80066fe:	f8c8 3000 	str.w	r3, [r8]
 8006702:	462b      	mov	r3, r5
 8006704:	e7df      	b.n	80066c6 <__kernel_rem_pio2+0x306>
 8006706:	1e62      	subs	r2, r4, #1
 8006708:	ab0c      	add	r3, sp, #48	; 0x30
 800670a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006712:	a90c      	add	r1, sp, #48	; 0x30
 8006714:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006718:	e738      	b.n	800658c <__kernel_rem_pio2+0x1cc>
 800671a:	1e62      	subs	r2, r4, #1
 800671c:	ab0c      	add	r3, sp, #48	; 0x30
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006726:	e7f4      	b.n	8006712 <__kernel_rem_pio2+0x352>
 8006728:	a90c      	add	r1, sp, #48	; 0x30
 800672a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800672e:	3b01      	subs	r3, #1
 8006730:	430a      	orrs	r2, r1
 8006732:	e788      	b.n	8006646 <__kernel_rem_pio2+0x286>
 8006734:	3301      	adds	r3, #1
 8006736:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800673a:	2900      	cmp	r1, #0
 800673c:	d0fa      	beq.n	8006734 <__kernel_rem_pio2+0x374>
 800673e:	9a08      	ldr	r2, [sp, #32]
 8006740:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8006744:	446a      	add	r2, sp
 8006746:	3a98      	subs	r2, #152	; 0x98
 8006748:	9208      	str	r2, [sp, #32]
 800674a:	9a06      	ldr	r2, [sp, #24]
 800674c:	a920      	add	r1, sp, #128	; 0x80
 800674e:	18a2      	adds	r2, r4, r2
 8006750:	18e3      	adds	r3, r4, r3
 8006752:	f104 0801 	add.w	r8, r4, #1
 8006756:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800675a:	9302      	str	r3, [sp, #8]
 800675c:	9b02      	ldr	r3, [sp, #8]
 800675e:	4543      	cmp	r3, r8
 8006760:	da04      	bge.n	800676c <__kernel_rem_pio2+0x3ac>
 8006762:	461c      	mov	r4, r3
 8006764:	e6a2      	b.n	80064ac <__kernel_rem_pio2+0xec>
 8006766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006768:	2301      	movs	r3, #1
 800676a:	e7e4      	b.n	8006736 <__kernel_rem_pio2+0x376>
 800676c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006772:	f7f9 fe7b 	bl	800046c <__aeabi_i2d>
 8006776:	e8e5 0102 	strd	r0, r1, [r5], #8
 800677a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677c:	46ab      	mov	fp, r5
 800677e:	461c      	mov	r4, r3
 8006780:	f04f 0900 	mov.w	r9, #0
 8006784:	2600      	movs	r6, #0
 8006786:	2700      	movs	r7, #0
 8006788:	9b05      	ldr	r3, [sp, #20]
 800678a:	4599      	cmp	r9, r3
 800678c:	dd06      	ble.n	800679c <__kernel_rem_pio2+0x3dc>
 800678e:	9b08      	ldr	r3, [sp, #32]
 8006790:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006794:	f108 0801 	add.w	r8, r8, #1
 8006798:	9308      	str	r3, [sp, #32]
 800679a:	e7df      	b.n	800675c <__kernel_rem_pio2+0x39c>
 800679c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80067a0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80067a4:	f7f9 fecc 	bl	8000540 <__aeabi_dmul>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 fd10 	bl	80001d4 <__adddf3>
 80067b4:	f109 0901 	add.w	r9, r9, #1
 80067b8:	4606      	mov	r6, r0
 80067ba:	460f      	mov	r7, r1
 80067bc:	e7e4      	b.n	8006788 <__kernel_rem_pio2+0x3c8>
 80067be:	3d01      	subs	r5, #1
 80067c0:	e747      	b.n	8006652 <__kernel_rem_pio2+0x292>
 80067c2:	ec47 6b10 	vmov	d0, r6, r7
 80067c6:	f1ca 0000 	rsb	r0, sl, #0
 80067ca:	f000 f949 	bl	8006a60 <scalbn>
 80067ce:	ec57 6b10 	vmov	r6, r7, d0
 80067d2:	4ba0      	ldr	r3, [pc, #640]	; (8006a54 <__kernel_rem_pio2+0x694>)
 80067d4:	ee10 0a10 	vmov	r0, s0
 80067d8:	2200      	movs	r2, #0
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f936 	bl	8000a4c <__aeabi_dcmpge>
 80067e0:	b1f8      	cbz	r0, 8006822 <__kernel_rem_pio2+0x462>
 80067e2:	4b9d      	ldr	r3, [pc, #628]	; (8006a58 <__kernel_rem_pio2+0x698>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	f7f9 fea9 	bl	8000540 <__aeabi_dmul>
 80067ee:	f7fa f941 	bl	8000a74 <__aeabi_d2iz>
 80067f2:	4680      	mov	r8, r0
 80067f4:	f7f9 fe3a 	bl	800046c <__aeabi_i2d>
 80067f8:	4b96      	ldr	r3, [pc, #600]	; (8006a54 <__kernel_rem_pio2+0x694>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	f7f9 fea0 	bl	8000540 <__aeabi_dmul>
 8006800:	460b      	mov	r3, r1
 8006802:	4602      	mov	r2, r0
 8006804:	4639      	mov	r1, r7
 8006806:	4630      	mov	r0, r6
 8006808:	f7f9 fce2 	bl	80001d0 <__aeabi_dsub>
 800680c:	f7fa f932 	bl	8000a74 <__aeabi_d2iz>
 8006810:	1c65      	adds	r5, r4, #1
 8006812:	ab0c      	add	r3, sp, #48	; 0x30
 8006814:	f10a 0a18 	add.w	sl, sl, #24
 8006818:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800681c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006820:	e71f      	b.n	8006662 <__kernel_rem_pio2+0x2a2>
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	f7fa f925 	bl	8000a74 <__aeabi_d2iz>
 800682a:	ab0c      	add	r3, sp, #48	; 0x30
 800682c:	4625      	mov	r5, r4
 800682e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006832:	e716      	b.n	8006662 <__kernel_rem_pio2+0x2a2>
 8006834:	ab0c      	add	r3, sp, #48	; 0x30
 8006836:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800683a:	f7f9 fe17 	bl	800046c <__aeabi_i2d>
 800683e:	4632      	mov	r2, r6
 8006840:	463b      	mov	r3, r7
 8006842:	f7f9 fe7d 	bl	8000540 <__aeabi_dmul>
 8006846:	4642      	mov	r2, r8
 8006848:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800684c:	464b      	mov	r3, r9
 800684e:	4630      	mov	r0, r6
 8006850:	4639      	mov	r1, r7
 8006852:	f7f9 fe75 	bl	8000540 <__aeabi_dmul>
 8006856:	3c01      	subs	r4, #1
 8006858:	4606      	mov	r6, r0
 800685a:	460f      	mov	r7, r1
 800685c:	e713      	b.n	8006686 <__kernel_rem_pio2+0x2c6>
 800685e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8006862:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8006866:	f7f9 fe6b 	bl	8000540 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4648      	mov	r0, r9
 8006870:	4651      	mov	r1, sl
 8006872:	f7f9 fcaf 	bl	80001d4 <__adddf3>
 8006876:	3701      	adds	r7, #1
 8006878:	4681      	mov	r9, r0
 800687a:	468a      	mov	sl, r1
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	429f      	cmp	r7, r3
 8006880:	dc02      	bgt.n	8006888 <__kernel_rem_pio2+0x4c8>
 8006882:	9b06      	ldr	r3, [sp, #24]
 8006884:	429f      	cmp	r7, r3
 8006886:	ddea      	ble.n	800685e <__kernel_rem_pio2+0x49e>
 8006888:	9a06      	ldr	r2, [sp, #24]
 800688a:	ab48      	add	r3, sp, #288	; 0x120
 800688c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006890:	e9c6 9a00 	strd	r9, sl, [r6]
 8006894:	3c01      	subs	r4, #1
 8006896:	e6fa      	b.n	800668e <__kernel_rem_pio2+0x2ce>
 8006898:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800689a:	2b02      	cmp	r3, #2
 800689c:	dc0b      	bgt.n	80068b6 <__kernel_rem_pio2+0x4f6>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dc39      	bgt.n	8006916 <__kernel_rem_pio2+0x556>
 80068a2:	d05d      	beq.n	8006960 <__kernel_rem_pio2+0x5a0>
 80068a4:	9b02      	ldr	r3, [sp, #8]
 80068a6:	f003 0007 	and.w	r0, r3, #7
 80068aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80068ae:	ecbd 8b02 	vpop	{d8}
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	d1f3      	bne.n	80068a4 <__kernel_rem_pio2+0x4e4>
 80068bc:	9b05      	ldr	r3, [sp, #20]
 80068be:	9500      	str	r5, [sp, #0]
 80068c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80068c4:	eb0d 0403 	add.w	r4, sp, r3
 80068c8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80068cc:	46a2      	mov	sl, r4
 80068ce:	9b00      	ldr	r3, [sp, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f1aa 0a08 	sub.w	sl, sl, #8
 80068d6:	dc69      	bgt.n	80069ac <__kernel_rem_pio2+0x5ec>
 80068d8:	46aa      	mov	sl, r5
 80068da:	f1ba 0f01 	cmp.w	sl, #1
 80068de:	f1a4 0408 	sub.w	r4, r4, #8
 80068e2:	f300 8083 	bgt.w	80069ec <__kernel_rem_pio2+0x62c>
 80068e6:	9c05      	ldr	r4, [sp, #20]
 80068e8:	ab48      	add	r3, sp, #288	; 0x120
 80068ea:	441c      	add	r4, r3
 80068ec:	2000      	movs	r0, #0
 80068ee:	2100      	movs	r1, #0
 80068f0:	2d01      	cmp	r5, #1
 80068f2:	f300 809a 	bgt.w	8006a2a <__kernel_rem_pio2+0x66a>
 80068f6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80068fa:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80068fe:	f1bb 0f00 	cmp.w	fp, #0
 8006902:	f040 8098 	bne.w	8006a36 <__kernel_rem_pio2+0x676>
 8006906:	9b04      	ldr	r3, [sp, #16]
 8006908:	e9c3 7800 	strd	r7, r8, [r3]
 800690c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006910:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006914:	e7c6      	b.n	80068a4 <__kernel_rem_pio2+0x4e4>
 8006916:	9e05      	ldr	r6, [sp, #20]
 8006918:	ab48      	add	r3, sp, #288	; 0x120
 800691a:	441e      	add	r6, r3
 800691c:	462c      	mov	r4, r5
 800691e:	2000      	movs	r0, #0
 8006920:	2100      	movs	r1, #0
 8006922:	2c00      	cmp	r4, #0
 8006924:	da33      	bge.n	800698e <__kernel_rem_pio2+0x5ce>
 8006926:	f1bb 0f00 	cmp.w	fp, #0
 800692a:	d036      	beq.n	800699a <__kernel_rem_pio2+0x5da>
 800692c:	4602      	mov	r2, r0
 800692e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006932:	9c04      	ldr	r4, [sp, #16]
 8006934:	e9c4 2300 	strd	r2, r3, [r4]
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006940:	f7f9 fc46 	bl	80001d0 <__aeabi_dsub>
 8006944:	ae4a      	add	r6, sp, #296	; 0x128
 8006946:	2401      	movs	r4, #1
 8006948:	42a5      	cmp	r5, r4
 800694a:	da29      	bge.n	80069a0 <__kernel_rem_pio2+0x5e0>
 800694c:	f1bb 0f00 	cmp.w	fp, #0
 8006950:	d002      	beq.n	8006958 <__kernel_rem_pio2+0x598>
 8006952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006956:	4619      	mov	r1, r3
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800695e:	e7a1      	b.n	80068a4 <__kernel_rem_pio2+0x4e4>
 8006960:	9c05      	ldr	r4, [sp, #20]
 8006962:	ab48      	add	r3, sp, #288	; 0x120
 8006964:	441c      	add	r4, r3
 8006966:	2000      	movs	r0, #0
 8006968:	2100      	movs	r1, #0
 800696a:	2d00      	cmp	r5, #0
 800696c:	da09      	bge.n	8006982 <__kernel_rem_pio2+0x5c2>
 800696e:	f1bb 0f00 	cmp.w	fp, #0
 8006972:	d002      	beq.n	800697a <__kernel_rem_pio2+0x5ba>
 8006974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006978:	4619      	mov	r1, r3
 800697a:	9b04      	ldr	r3, [sp, #16]
 800697c:	e9c3 0100 	strd	r0, r1, [r3]
 8006980:	e790      	b.n	80068a4 <__kernel_rem_pio2+0x4e4>
 8006982:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006986:	f7f9 fc25 	bl	80001d4 <__adddf3>
 800698a:	3d01      	subs	r5, #1
 800698c:	e7ed      	b.n	800696a <__kernel_rem_pio2+0x5aa>
 800698e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006992:	f7f9 fc1f 	bl	80001d4 <__adddf3>
 8006996:	3c01      	subs	r4, #1
 8006998:	e7c3      	b.n	8006922 <__kernel_rem_pio2+0x562>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	e7c8      	b.n	8006932 <__kernel_rem_pio2+0x572>
 80069a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80069a4:	f7f9 fc16 	bl	80001d4 <__adddf3>
 80069a8:	3401      	adds	r4, #1
 80069aa:	e7cd      	b.n	8006948 <__kernel_rem_pio2+0x588>
 80069ac:	e9da 8900 	ldrd	r8, r9, [sl]
 80069b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4632      	mov	r2, r6
 80069bc:	463b      	mov	r3, r7
 80069be:	4640      	mov	r0, r8
 80069c0:	4649      	mov	r1, r9
 80069c2:	f7f9 fc07 	bl	80001d4 <__adddf3>
 80069c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	4640      	mov	r0, r8
 80069d0:	4649      	mov	r1, r9
 80069d2:	f7f9 fbfd 	bl	80001d0 <__aeabi_dsub>
 80069d6:	4632      	mov	r2, r6
 80069d8:	463b      	mov	r3, r7
 80069da:	f7f9 fbfb 	bl	80001d4 <__adddf3>
 80069de:	ed9d 7b06 	vldr	d7, [sp, #24]
 80069e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069e6:	ed8a 7b00 	vstr	d7, [sl]
 80069ea:	e770      	b.n	80068ce <__kernel_rem_pio2+0x50e>
 80069ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 80069f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80069f4:	4640      	mov	r0, r8
 80069f6:	4632      	mov	r2, r6
 80069f8:	463b      	mov	r3, r7
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fbea 	bl	80001d4 <__adddf3>
 8006a00:	e9cd 0100 	strd	r0, r1, [sp]
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7f9 fbe0 	bl	80001d0 <__aeabi_dsub>
 8006a10:	4632      	mov	r2, r6
 8006a12:	463b      	mov	r3, r7
 8006a14:	f7f9 fbde 	bl	80001d4 <__adddf3>
 8006a18:	ed9d 7b00 	vldr	d7, [sp]
 8006a1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a20:	ed84 7b00 	vstr	d7, [r4]
 8006a24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a28:	e757      	b.n	80068da <__kernel_rem_pio2+0x51a>
 8006a2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a2e:	f7f9 fbd1 	bl	80001d4 <__adddf3>
 8006a32:	3d01      	subs	r5, #1
 8006a34:	e75c      	b.n	80068f0 <__kernel_rem_pio2+0x530>
 8006a36:	9b04      	ldr	r3, [sp, #16]
 8006a38:	9a04      	ldr	r2, [sp, #16]
 8006a3a:	601f      	str	r7, [r3, #0]
 8006a3c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006a40:	605c      	str	r4, [r3, #4]
 8006a42:	609d      	str	r5, [r3, #8]
 8006a44:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a48:	60d3      	str	r3, [r2, #12]
 8006a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a4e:	6110      	str	r0, [r2, #16]
 8006a50:	6153      	str	r3, [r2, #20]
 8006a52:	e727      	b.n	80068a4 <__kernel_rem_pio2+0x4e4>
 8006a54:	41700000 	.word	0x41700000
 8006a58:	3e700000 	.word	0x3e700000
 8006a5c:	00000000 	.word	0x00000000

08006a60 <scalbn>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	ec55 4b10 	vmov	r4, r5, d0
 8006a66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	b999      	cbnz	r1, 8006a98 <scalbn+0x38>
 8006a70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a74:	4323      	orrs	r3, r4
 8006a76:	d03f      	beq.n	8006af8 <scalbn+0x98>
 8006a78:	4b35      	ldr	r3, [pc, #212]	; (8006b50 <scalbn+0xf0>)
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	ee10 0a10 	vmov	r0, s0
 8006a80:	2200      	movs	r2, #0
 8006a82:	f7f9 fd5d 	bl	8000540 <__aeabi_dmul>
 8006a86:	4b33      	ldr	r3, [pc, #204]	; (8006b54 <scalbn+0xf4>)
 8006a88:	429e      	cmp	r6, r3
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	460d      	mov	r5, r1
 8006a8e:	da10      	bge.n	8006ab2 <scalbn+0x52>
 8006a90:	a327      	add	r3, pc, #156	; (adr r3, 8006b30 <scalbn+0xd0>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	e01f      	b.n	8006ad8 <scalbn+0x78>
 8006a98:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006a9c:	4291      	cmp	r1, r2
 8006a9e:	d10c      	bne.n	8006aba <scalbn+0x5a>
 8006aa0:	ee10 2a10 	vmov	r2, s0
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7f9 fb94 	bl	80001d4 <__adddf3>
 8006aac:	4604      	mov	r4, r0
 8006aae:	460d      	mov	r5, r1
 8006ab0:	e022      	b.n	8006af8 <scalbn+0x98>
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006ab8:	3936      	subs	r1, #54	; 0x36
 8006aba:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006abe:	4296      	cmp	r6, r2
 8006ac0:	dd0d      	ble.n	8006ade <scalbn+0x7e>
 8006ac2:	2d00      	cmp	r5, #0
 8006ac4:	a11c      	add	r1, pc, #112	; (adr r1, 8006b38 <scalbn+0xd8>)
 8006ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aca:	da02      	bge.n	8006ad2 <scalbn+0x72>
 8006acc:	a11c      	add	r1, pc, #112	; (adr r1, 8006b40 <scalbn+0xe0>)
 8006ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad2:	a319      	add	r3, pc, #100	; (adr r3, 8006b38 <scalbn+0xd8>)
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f7f9 fd32 	bl	8000540 <__aeabi_dmul>
 8006adc:	e7e6      	b.n	8006aac <scalbn+0x4c>
 8006ade:	1872      	adds	r2, r6, r1
 8006ae0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	dcec      	bgt.n	8006ac2 <scalbn+0x62>
 8006ae8:	2a00      	cmp	r2, #0
 8006aea:	dd08      	ble.n	8006afe <scalbn+0x9e>
 8006aec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006af0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006af4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006af8:	ec45 4b10 	vmov	d0, r4, r5
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b02:	da08      	bge.n	8006b16 <scalbn+0xb6>
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	a10a      	add	r1, pc, #40	; (adr r1, 8006b30 <scalbn+0xd0>)
 8006b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0c:	dac0      	bge.n	8006a90 <scalbn+0x30>
 8006b0e:	a10e      	add	r1, pc, #56	; (adr r1, 8006b48 <scalbn+0xe8>)
 8006b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b14:	e7bc      	b.n	8006a90 <scalbn+0x30>
 8006b16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b1a:	3236      	adds	r2, #54	; 0x36
 8006b1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b24:	4620      	mov	r0, r4
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <scalbn+0xf8>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	e7d5      	b.n	8006ad8 <scalbn+0x78>
 8006b2c:	f3af 8000 	nop.w
 8006b30:	c2f8f359 	.word	0xc2f8f359
 8006b34:	01a56e1f 	.word	0x01a56e1f
 8006b38:	8800759c 	.word	0x8800759c
 8006b3c:	7e37e43c 	.word	0x7e37e43c
 8006b40:	8800759c 	.word	0x8800759c
 8006b44:	fe37e43c 	.word	0xfe37e43c
 8006b48:	c2f8f359 	.word	0xc2f8f359
 8006b4c:	81a56e1f 	.word	0x81a56e1f
 8006b50:	43500000 	.word	0x43500000
 8006b54:	ffff3cb0 	.word	0xffff3cb0
 8006b58:	3c900000 	.word	0x3c900000
 8006b5c:	00000000 	.word	0x00000000

08006b60 <floor>:
 8006b60:	ec51 0b10 	vmov	r0, r1, d0
 8006b64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006b70:	2e13      	cmp	r6, #19
 8006b72:	ee10 5a10 	vmov	r5, s0
 8006b76:	ee10 8a10 	vmov	r8, s0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	dc31      	bgt.n	8006be2 <floor+0x82>
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	da14      	bge.n	8006bac <floor+0x4c>
 8006b82:	a333      	add	r3, pc, #204	; (adr r3, 8006c50 <floor+0xf0>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fb24 	bl	80001d4 <__adddf3>
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f7f9 ff66 	bl	8000a60 <__aeabi_dcmpgt>
 8006b94:	b138      	cbz	r0, 8006ba6 <floor+0x46>
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	da53      	bge.n	8006c42 <floor+0xe2>
 8006b9a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006b9e:	4325      	orrs	r5, r4
 8006ba0:	d052      	beq.n	8006c48 <floor+0xe8>
 8006ba2:	4c2d      	ldr	r4, [pc, #180]	; (8006c58 <floor+0xf8>)
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	e024      	b.n	8006bf6 <floor+0x96>
 8006bac:	4f2b      	ldr	r7, [pc, #172]	; (8006c5c <floor+0xfc>)
 8006bae:	4137      	asrs	r7, r6
 8006bb0:	ea01 0307 	and.w	r3, r1, r7
 8006bb4:	4303      	orrs	r3, r0
 8006bb6:	d01e      	beq.n	8006bf6 <floor+0x96>
 8006bb8:	a325      	add	r3, pc, #148	; (adr r3, 8006c50 <floor+0xf0>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f7f9 fb09 	bl	80001d4 <__adddf3>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f7f9 ff4b 	bl	8000a60 <__aeabi_dcmpgt>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d0eb      	beq.n	8006ba6 <floor+0x46>
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	bfbe      	ittt	lt
 8006bd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006bd6:	4133      	asrlt	r3, r6
 8006bd8:	18e4      	addlt	r4, r4, r3
 8006bda:	ea24 0407 	bic.w	r4, r4, r7
 8006bde:	2500      	movs	r5, #0
 8006be0:	e7e1      	b.n	8006ba6 <floor+0x46>
 8006be2:	2e33      	cmp	r6, #51	; 0x33
 8006be4:	dd0b      	ble.n	8006bfe <floor+0x9e>
 8006be6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006bea:	d104      	bne.n	8006bf6 <floor+0x96>
 8006bec:	ee10 2a10 	vmov	r2, s0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	f7f9 faef 	bl	80001d4 <__adddf3>
 8006bf6:	ec41 0b10 	vmov	d0, r0, r1
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfe:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006c02:	f04f 37ff 	mov.w	r7, #4294967295
 8006c06:	40df      	lsrs	r7, r3
 8006c08:	4238      	tst	r0, r7
 8006c0a:	d0f4      	beq.n	8006bf6 <floor+0x96>
 8006c0c:	a310      	add	r3, pc, #64	; (adr r3, 8006c50 <floor+0xf0>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fadf 	bl	80001d4 <__adddf3>
 8006c16:	2200      	movs	r2, #0
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f7f9 ff21 	bl	8000a60 <__aeabi_dcmpgt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d0c1      	beq.n	8006ba6 <floor+0x46>
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	da0a      	bge.n	8006c3c <floor+0xdc>
 8006c26:	2e14      	cmp	r6, #20
 8006c28:	d101      	bne.n	8006c2e <floor+0xce>
 8006c2a:	3401      	adds	r4, #1
 8006c2c:	e006      	b.n	8006c3c <floor+0xdc>
 8006c2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c32:	2301      	movs	r3, #1
 8006c34:	40b3      	lsls	r3, r6
 8006c36:	441d      	add	r5, r3
 8006c38:	45a8      	cmp	r8, r5
 8006c3a:	d8f6      	bhi.n	8006c2a <floor+0xca>
 8006c3c:	ea25 0507 	bic.w	r5, r5, r7
 8006c40:	e7b1      	b.n	8006ba6 <floor+0x46>
 8006c42:	2500      	movs	r5, #0
 8006c44:	462c      	mov	r4, r5
 8006c46:	e7ae      	b.n	8006ba6 <floor+0x46>
 8006c48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006c4c:	e7ab      	b.n	8006ba6 <floor+0x46>
 8006c4e:	bf00      	nop
 8006c50:	8800759c 	.word	0x8800759c
 8006c54:	7e37e43c 	.word	0x7e37e43c
 8006c58:	bff00000 	.word	0xbff00000
 8006c5c:	000fffff 	.word	0x000fffff

08006c60 <_init>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr

08006c6c <_fini>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr
